[
    {
        "type": "convention",
        "module": "noxconfig",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "noxconfig.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "noxconfig",
        "obj": "StartDB",
        "line": 10,
        "column": 0,
        "endLine": 10,
        "endColumn": 13,
        "path": "noxconfig.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "noxconfig",
        "obj": "StartDB.pre_integration_tests_hook",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 34,
        "path": "noxconfig.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "noxconfig",
        "obj": "StartDB.pre_integration_tests_hook",
        "line": 13,
        "column": 50,
        "endLine": 13,
        "endColumn": 56,
        "path": "noxconfig.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'config'",
        "message-id": "W0613"
    },
    {
        "type": "refactor",
        "module": "noxconfig",
        "obj": "StartDB",
        "line": 10,
        "column": 0,
        "endLine": 10,
        "endColumn": 13,
        "path": "noxconfig.py",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (1/2)",
        "message-id": "R0903"
    },
    {
        "type": "convention",
        "module": "noxconfig",
        "obj": "StopDB",
        "line": 34,
        "column": 0,
        "endLine": 34,
        "endColumn": 12,
        "path": "noxconfig.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "noxconfig",
        "obj": "StopDB.post_integration_tests_hook",
        "line": 37,
        "column": 4,
        "endLine": 37,
        "endColumn": 35,
        "path": "noxconfig.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "noxconfig",
        "obj": "StopDB.post_integration_tests_hook",
        "line": 37,
        "column": 51,
        "endLine": 37,
        "endColumn": 57,
        "path": "noxconfig.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'config'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "noxconfig",
        "obj": "StopDB.post_integration_tests_hook",
        "line": 37,
        "column": 59,
        "endLine": 37,
        "endColumn": 66,
        "path": "noxconfig.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'context'",
        "message-id": "W0613"
    },
    {
        "type": "refactor",
        "module": "noxconfig",
        "obj": "StopDB",
        "line": 34,
        "column": 0,
        "endLine": 34,
        "endColumn": 12,
        "path": "noxconfig.py",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (1/2)",
        "message-id": "R0903"
    },
    {
        "type": "convention",
        "module": "noxconfig",
        "obj": "Config",
        "line": 42,
        "column": 0,
        "endLine": 42,
        "endColumn": 12,
        "path": "noxconfig.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "noxfile.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 154,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "noxfile.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 199,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "noxfile.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 236,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "noxfile.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 298,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "noxfile.py",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'not' keyword",
        "message-id": "C0325"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 300,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "noxfile.py",
        "symbol": "line-too-long",
        "message": "Line too long (112/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 320,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "noxfile.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "noxfile.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": 20,
        "endColumn": 27,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from typing import Iterator\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": 22,
        "endColumn": 10,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"import nox\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": 23,
        "endColumn": 28,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from git_helpers import tags\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": 24,
        "endColumn": 33,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from links import check as _check\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": 25,
        "endColumn": 49,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from links import documentation as _documentation\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": 26,
        "endColumn": 31,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from links import urls as _urls\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": 27,
        "endColumn": 23,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from nox import Session\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": 28,
        "endColumn": 38,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from nox.sessions import SessionRunner\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": 33,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from version_check import version_from_poetry, version_from_python_module, version_from_string\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 35,
        "column": 0,
        "endLine": 38,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from exasol.odbc import ODBC_DRIVER, odbcconfig\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "Settings",
        "line": 44,
        "column": 0,
        "endLine": 44,
        "endColumn": 14,
        "path": "noxfile.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "refactor",
        "module": "noxfile",
        "obj": "Settings",
        "line": 44,
        "column": 0,
        "endLine": 44,
        "endColumn": 14,
        "path": "noxfile.py",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (0/2)",
        "message-id": "R0903"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "find_session_runner",
        "line": 55,
        "column": 16,
        "endLine": 55,
        "endColumn": 31,
        "path": "noxfile.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _runner of a client class",
        "message-id": "W0212"
    },
    {
        "type": "refactor",
        "module": "noxfile",
        "obj": "find_session_runner",
        "line": 53,
        "column": 0,
        "endLine": 53,
        "endColumn": 23,
        "path": "noxfile.py",
        "symbol": "inconsistent-return-statements",
        "message": "Either all return statements in a function should return an expression, or none of them should.",
        "message-id": "R1710"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "_python_files",
        "line": 61,
        "column": 18,
        "endLine": 61,
        "endColumn": 28,
        "path": "noxfile.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'path'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 68,
        "column": 0,
        "endLine": 74,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from exasol.toolbox.nox._format import Mode, _code_format, _pyupgrade, _version, fix\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "check",
        "line": 80,
        "column": 4,
        "endLine": 83,
        "endColumn": 5,
        "path": "noxfile.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (exasol.toolbox.nox._lint._pylint, exasol.toolbox.nox._lint._type_check)",
        "message-id": "C0415"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "check",
        "line": 84,
        "column": 4,
        "endLine": 84,
        "endColumn": 51,
        "path": "noxfile.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (exasol.toolbox.nox._shared._context)",
        "message-id": "C0415"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "check",
        "line": 85,
        "column": 4,
        "endLine": 85,
        "endColumn": 50,
        "path": "noxfile.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (exasol.toolbox.nox._test._coverage)",
        "message-id": "C0415"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "check",
        "line": 86,
        "column": 4,
        "endLine": 86,
        "endColumn": 40,
        "path": "noxfile.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (noxconfig.PROJECT_CONFIG)",
        "message-id": "C0415"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 97,
        "column": 0,
        "endLine": 100,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from exasol.toolbox.nox._lint import lint, type_check\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "sqlalchemy_tests",
        "line": 173,
        "column": 37,
        "endLine": 173,
        "endColumn": 43,
        "path": "noxfile.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'config'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "exasol_tests",
        "line": 214,
        "column": 37,
        "endLine": 214,
        "endColumn": 43,
        "path": "noxfile.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'config'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "integration_tests",
        "line": 263,
        "column": 37,
        "endLine": 263,
        "endColumn": 49,
        "path": "noxfile.py",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "message-id": "W1309"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "integration_tests",
        "line": 267,
        "column": 37,
        "endLine": 267,
        "endColumn": 51,
        "path": "noxfile.py",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "message-id": "W1309"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "integration_tests",
        "line": 271,
        "column": 37,
        "endLine": 271,
        "endColumn": 55,
        "path": "noxfile.py",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "message-id": "W1309"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "report_skipped",
        "line": 327,
        "column": 45,
        "endLine": 327,
        "endColumn": 51,
        "path": "noxfile.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'config'",
        "message-id": "W0612"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 352,
        "column": 0,
        "endLine": 357,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from exasol.toolbox.nox._documentation import build_docs, build_multiversion, clean_docs, open_docs\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 386,
        "column": 0,
        "endLine": 391,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "reimported",
        "message": "Reimport 'build_docs' (imported line 352)",
        "message-id": "W0404"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 386,
        "column": 0,
        "endLine": 391,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "reimported",
        "message": "Reimport 'build_multiversion' (imported line 352)",
        "message-id": "W0404"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 386,
        "column": 0,
        "endLine": 391,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "reimported",
        "message": "Reimport 'clean_docs' (imported line 352)",
        "message-id": "W0404"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 386,
        "column": 0,
        "endLine": 391,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "reimported",
        "message": "Reimport 'open_docs' (imported line 352)",
        "message-id": "W0404"
    },
    {
        "type": "convention",
        "module": "noxfile",
        "obj": "",
        "line": 386,
        "column": 0,
        "endLine": 391,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from exasol.toolbox.nox._documentation import build_docs, build_multiversion, clean_docs, open_docs\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": 5,
        "endColumn": 17,
        "path": "noxfile.py",
        "symbol": "unused-import",
        "message": "Unused import webbrowser",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 8,
        "endColumn": 25,
        "path": "noxfile.py",
        "symbol": "unused-import",
        "message": "Unused rmtree imported from shutil",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 68,
        "column": 0,
        "endLine": 74,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "unused-import",
        "message": "Unused _pyupgrade imported from exasol.toolbox.nox._format",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 68,
        "column": 0,
        "endLine": 74,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "unused-import",
        "message": "Unused fix imported from exasol.toolbox.nox._format",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 97,
        "column": 0,
        "endLine": 100,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "unused-import",
        "message": "Unused lint imported from exasol.toolbox.nox._lint",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 97,
        "column": 0,
        "endLine": 100,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "unused-import",
        "message": "Unused type_check imported from exasol.toolbox.nox._lint",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 352,
        "column": 0,
        "endLine": 357,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "unused-import",
        "message": "Unused build_docs imported from exasol.toolbox.nox._documentation",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 352,
        "column": 0,
        "endLine": 357,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "unused-import",
        "message": "Unused build_multiversion imported from exasol.toolbox.nox._documentation",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 352,
        "column": 0,
        "endLine": 357,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "unused-import",
        "message": "Unused clean_docs imported from exasol.toolbox.nox._documentation",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "noxfile",
        "obj": "",
        "line": 352,
        "column": 0,
        "endLine": 357,
        "endColumn": 1,
        "path": "noxfile.py",
        "symbol": "unused-import",
        "message": "Unused open_docs imported from exasol.toolbox.nox._documentation",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "doc.conf",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "doc/conf.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "warning",
        "module": "doc.conf",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": 21,
        "endColumn": 9,
        "path": "doc/conf.py",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'copyright'",
        "message-id": "W0622"
    },
    {
        "type": "convention",
        "module": "doc.conf",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": 20,
        "endColumn": 7,
        "path": "doc/conf.py",
        "symbol": "invalid-name",
        "message": "Constant name \"project\" doesn't conform to UPPER_CASE naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "doc.conf",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": 21,
        "endColumn": 9,
        "path": "doc/conf.py",
        "symbol": "invalid-name",
        "message": "Constant name \"copyright\" doesn't conform to UPPER_CASE naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "doc.conf",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": 22,
        "endColumn": 6,
        "path": "doc/conf.py",
        "symbol": "invalid-name",
        "message": "Constant name \"author\" doesn't conform to UPPER_CASE naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "doc.conf",
        "obj": "",
        "line": 51,
        "column": 0,
        "endLine": 51,
        "endColumn": 18,
        "path": "doc/conf.py",
        "symbol": "invalid-name",
        "message": "Constant name \"todo_include_todos\" doesn't conform to UPPER_CASE naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "doc.conf",
        "obj": "",
        "line": 66,
        "column": 0,
        "endLine": 66,
        "endColumn": 10,
        "path": "doc/conf.py",
        "symbol": "invalid-name",
        "message": "Constant name \"html_theme\" doesn't conform to UPPER_CASE naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "doc.conf",
        "obj": "",
        "line": 72,
        "column": 0,
        "endLine": 72,
        "endColumn": 10,
        "path": "doc/conf.py",
        "symbol": "invalid-name",
        "message": "Constant name \"html_title\" doesn't conform to UPPER_CASE naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "",
        "line": 79,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "_ExaDecimal.bind_processor",
        "line": 31,
        "column": 4,
        "endLine": 31,
        "endColumn": 22,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "useless-parent-delegation",
        "message": "Useless parent or super() delegation in method 'bind_processor'",
        "message-id": "W0246"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "_ExaDecimal.bind_processor",
        "line": 31,
        "column": 29,
        "endLine": 31,
        "endColumn": 36,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 151)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "_ExaDecimal.result_processor",
        "line": 34,
        "column": 31,
        "endLine": 34,
        "endColumn": 38,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 151)",
        "message-id": "W0621"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "_ExaDecimal.result_processor",
        "line": 35,
        "column": 8,
        "endLine": 50,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "no-else-return",
        "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
        "message-id": "R1705"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "_ExaDecimal.result_processor",
        "line": 36,
        "column": 22,
        "endLine": 36,
        "endColumn": 30,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "_ExaDecimal.result_processor.to_decimal",
        "line": 39,
        "column": 16,
        "endLine": 46,
        "endColumn": 49,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "no-else-return",
        "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1705"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "_ExaInteger.bind_processor",
        "line": 54,
        "column": 4,
        "endLine": 54,
        "endColumn": 22,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "useless-parent-delegation",
        "message": "Useless parent or super() delegation in method 'bind_processor'",
        "message-id": "W0246"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "_ExaInteger.bind_processor",
        "line": 54,
        "column": 29,
        "endLine": 54,
        "endColumn": 36,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 151)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "_ExaInteger.result_processor",
        "line": 57,
        "column": 31,
        "endLine": 57,
        "endColumn": 38,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 151)",
        "message-id": "W0621"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "_ExaInteger.result_processor.to_integer",
        "line": 60,
        "column": 12,
        "endLine": 63,
        "endColumn": 28,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "no-else-return",
        "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
        "message-id": "R1705"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "invalid-name",
        "message": "Class name \"EXADialect_turbodbc\" doesn't conform to PascalCase naming style",
        "message-id": "C0103"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_begin_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_commit_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_prepare_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_recover_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_rollback_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_set_input_sizes' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_check_constraints' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_sequence_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_table_comment' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_temp_table_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_temp_view_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_unique_constraints' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'has_sequence' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc",
        "line": 68,
        "column": 0,
        "endLine": 68,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'set_isolation_level' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_turbodbc'",
        "message-id": "W0223"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc.dbapi",
        "line": 86,
        "column": 4,
        "endLine": 86,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc.dbapi",
        "line": 86,
        "column": 4,
        "endLine": 86,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "method-hidden",
        "message": "An attribute defined in sqlalchemy.engine.default line 305 hides this method",
        "message-id": "E0202"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "EXADialect_turbodbc._interpret_destination",
        "line": 138,
        "column": 33,
        "endLine": 138,
        "endColumn": 40,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.turbodbc",
        "obj": "",
        "line": 151,
        "column": 0,
        "endLine": 151,
        "endColumn": 7,
        "path": "sqlalchemy_exasol/turbodbc.py",
        "symbol": "invalid-name",
        "message": "Class name \"dialect\" doesn't conform to PascalCase naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.warnings",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/warnings.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 554,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 556,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 557,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 733,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "line-too-long",
        "message": "Line too long (103/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 955,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 1028,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 1067,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 1068,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 1069,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 1178,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "too-many-lines",
        "message": "Too many lines in module (1195/800)",
        "message-id": "C0302"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 635,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "fixme",
        "message": "TODO: FKs that reference other tables could be inlined",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 872,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "fixme",
        "message": "TODO: set isolation level",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 1028,
        "column": 13,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "fixme",
        "message": "FIXME: Missing type support: INTERVAL DAY [(p)] TO SECOND [(fp)], INTERVAL YEAR[(p)] TO MONTH",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 1067,
        "column": 17,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "fixme",
        "message": "TODO: we have to possibility to encode the current identity value count",
        "message-id": "W0511"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler",
        "line": 563,
        "column": 0,
        "endLine": 563,
        "endColumn": 17,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler",
        "line": 563,
        "column": 0,
        "endLine": 563,
        "endColumn": 17,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'delete_extra_from_clause' is abstract in class 'SQLCompiler' but is not overridden in child class 'EXACompiler'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler",
        "line": 563,
        "column": 0,
        "endLine": 563,
        "endColumn": 17,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'update_from_clause' is abstract in class 'SQLCompiler' but is not overridden in child class 'EXACompiler'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler",
        "line": 563,
        "column": 0,
        "endLine": 563,
        "endColumn": 17,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'visit_sequence' is abstract in class 'SQLCompiler' but is not overridden in child class 'EXACompiler'",
        "message-id": "W0223"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.visit_now_func",
        "line": 580,
        "column": 4,
        "endLine": 580,
        "endColumn": 22,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.visit_now_func",
        "line": 580,
        "column": 29,
        "endLine": 580,
        "endColumn": 31,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'fn'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.visit_now_func",
        "line": 580,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'kw'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.visit_char_length_func",
        "line": 583,
        "column": 4,
        "endLine": 583,
        "endColumn": 30,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.visit_char_length_func",
        "line": 584,
        "column": 15,
        "endLine": 584,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.visit_char_length_func",
        "line": 583,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'kw'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.limit_clause",
        "line": 588,
        "column": 11,
        "endLine": 588,
        "endColumn": 24,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _limit of a client class",
        "message-id": "W0212"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.limit_clause",
        "line": 589,
        "column": 20,
        "endLine": 589,
        "endColumn": 33,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.limit_clause",
        "line": 589,
        "column": 40,
        "endLine": 589,
        "endColumn": 53,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _limit of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.limit_clause",
        "line": 590,
        "column": 11,
        "endLine": 590,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _offset of a client class",
        "message-id": "W0212"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.limit_clause",
        "line": 591,
        "column": 20,
        "endLine": 591,
        "endColumn": 34,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.limit_clause",
        "line": 591,
        "column": 41,
        "endLine": 591,
        "endColumn": 55,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _offset of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.for_update_clause",
        "line": 595,
        "column": 4,
        "endLine": 595,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "arguments-differ",
        "message": "Variadics removed in overriding 'EXACompiler.for_update_clause' method",
        "message-id": "W0221"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.visit_empty_set_expr",
        "line": 606,
        "column": 4,
        "endLine": 606,
        "endColumn": 28,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "arguments-renamed",
        "message": "Parameter 'element_types' has been renamed to 'type_' in overriding 'EXACompiler.visit_empty_set_expr' method",
        "message-id": "W0237"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXACompiler.visit_empty_set_expr",
        "line": 606,
        "column": 35,
        "endLine": 606,
        "endColumn": 40,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'type_'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler",
        "line": 610,
        "column": 0,
        "endLine": 610,
        "endColumn": 20,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.get_column_specification",
        "line": 623,
        "column": 12,
        "endLine": 623,
        "endColumn": 19,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'default' from outer scope (line 65)",
        "message-id": "W0621"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.get_column_specification",
        "line": 615,
        "column": 12,
        "endLine": 617,
        "endColumn": 87,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "simplifiable-condition",
        "message": "Boolean condition \"column is column.table._autoincrement_column and True and (column.default is None or isinstance(column.default, schema.Sequence))\" may be simplified to \"column is column.table._autoincrement_column and (column.default is None or isinstance(column.default, schema.Sequence))\"",
        "message-id": "R1726"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.get_column_specification",
        "line": 615,
        "column": 22,
        "endLine": 615,
        "endColumn": 56,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _autoincrement_column of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.create_table_constraints",
        "line": 631,
        "column": 4,
        "endLine": 631,
        "endColumn": 32,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "arguments-differ",
        "message": "Variadics removed in overriding 'EXADDLCompiler.create_table_constraints' method",
        "message-id": "W0221"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.create_table_constraints",
        "line": 639,
        "column": 23,
        "endLine": 639,
        "endColumn": 48,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _sorted_constraints of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.create_table_constraints",
        "line": 641,
        "column": 12,
        "endLine": 641,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _create_rule of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.visit_add_constraint",
        "line": 645,
        "column": 4,
        "endLine": 645,
        "endColumn": 28,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "arguments-differ",
        "message": "Variadics removed in overriding 'EXADDLCompiler.visit_add_constraint' method",
        "message-id": "W0221"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.visit_add_constraint",
        "line": 646,
        "column": 8,
        "endLine": 652,
        "endColumn": 55,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "no-else-return",
        "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
        "message-id": "R1705"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.visit_add_constraint",
        "line": 647,
        "column": 19,
        "endLine": 647,
        "endColumn": 38,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.visit_drop_constraint",
        "line": 654,
        "column": 4,
        "endLine": 654,
        "endColumn": 29,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "arguments-differ",
        "message": "Variadics removed in overriding 'EXADDLCompiler.visit_drop_constraint' method",
        "message-id": "W0221"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.visit_drop_constraint",
        "line": 655,
        "column": 8,
        "endLine": 660,
        "endColumn": 54,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "no-else-return",
        "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
        "message-id": "R1705"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.visit_drop_constraint",
        "line": 656,
        "column": 19,
        "endLine": 656,
        "endColumn": 58,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.visit_distribute_by_constraint",
        "line": 662,
        "column": 4,
        "endLine": 662,
        "endColumn": 38,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.visit_create_index",
        "line": 669,
        "column": 4,
        "endLine": 669,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "arguments-differ",
        "message": "Number of parameters was 5 in 'DDLCompiler.visit_create_index' and is now 2 in overriding 'EXADDLCompiler.visit_create_index' method",
        "message-id": "W0221"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.visit_create_index",
        "line": 669,
        "column": 4,
        "endLine": 669,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "arguments-differ",
        "message": "Variadics removed in overriding 'EXADDLCompiler.visit_create_index' method",
        "message-id": "W0221"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADDLCompiler.visit_drop_index",
        "line": 675,
        "column": 4,
        "endLine": 675,
        "endColumn": 24,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "arguments-differ",
        "message": "Variadics removed in overriding 'EXADDLCompiler.visit_drop_index' method",
        "message-id": "W0221"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXATypeCompiler.visit_large_binary",
        "line": 694,
        "column": 4,
        "endLine": 694,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "arguments-differ",
        "message": "Variadics removed in overriding 'EXATypeCompiler.visit_large_binary' method",
        "message-id": "W0221"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXATypeCompiler.visit_datetime",
        "line": 697,
        "column": 4,
        "endLine": 697,
        "endColumn": 22,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "arguments-differ",
        "message": "Variadics removed in overriding 'EXATypeCompiler.visit_datetime' method",
        "message-id": "W0221"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAIdentifierPreparer",
        "line": 701,
        "column": 0,
        "endLine": 701,
        "endColumn": 27,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext",
        "line": 706,
        "column": 0,
        "endLine": 706,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext",
        "line": 706,
        "column": 0,
        "endLine": 706,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'create_server_side_cursor' is abstract in class 'DefaultExecutionContext' but is not overridden in child class 'EXAExecutionContext'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext",
        "line": 706,
        "column": 0,
        "endLine": 706,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'get_out_parameter_values' is abstract in class 'DefaultExecutionContext' but is not overridden in child class 'EXAExecutionContext'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext",
        "line": 706,
        "column": 0,
        "endLine": 706,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'get_rowcount' is abstract in class 'ExecutionContext' but is not overridden in child class 'EXAExecutionContext'",
        "message-id": "W0223"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext.fire_sequence",
        "line": 707,
        "column": 4,
        "endLine": 707,
        "endColumn": 21,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext.fire_sequence",
        "line": 707,
        "column": 28,
        "endLine": 707,
        "endColumn": 35,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'default' from outer scope (line 65)",
        "message-id": "W0621"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext.fire_sequence",
        "line": 708,
        "column": 8,
        "endLine": 708,
        "endColumn": 28,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "notimplemented-raised",
        "message": "NotImplemented raised - should raise NotImplementedError",
        "message-id": "E0711"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext.fire_sequence",
        "line": 708,
        "column": 8,
        "endLine": 708,
        "endColumn": 28,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "raising-bad-type",
        "message": "Raising NotImplementedType while only classes or instances are allowed",
        "message-id": "E0702"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext.get_insert_default",
        "line": 711,
        "column": 8,
        "endLine": 714,
        "endColumn": 53,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "no-else-return",
        "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
        "message-id": "R1705"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext.get_lastrowid",
        "line": 742,
        "column": 8,
        "endLine": 742,
        "endColumn": 14,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext.get_lastrowid",
        "line": 726,
        "column": 12,
        "endLine": 726,
        "endColumn": 32,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "broad-exception-raised",
        "message": "Raising too general exception: Exception",
        "message-id": "W0719"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext.get_lastrowid._get_schema",
        "line": 732,
        "column": 38,
        "endLine": 732,
        "endColumn": 45,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 10)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXAExecutionContext.get_lastrowid._get_schema",
        "line": 736,
        "column": 12,
        "endLine": 736,
        "endColumn": 18,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'do_begin_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'do_commit_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'do_prepare_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'do_recover_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'do_rollback_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'do_set_input_sizes' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'get_check_constraints' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'get_sequence_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'get_table_comment' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'get_temp_table_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'get_temp_view_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'get_unique_constraints' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'has_sequence' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect",
        "line": 763,
        "column": 0,
        "endLine": 763,
        "endColumn": 16,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "abstract-method",
        "message": "Method 'set_isolation_level' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.__init__",
        "line": 793,
        "column": 45,
        "endLine": 793,
        "endColumn": 60,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'native_datetime'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_default_schema_name",
        "line": 826,
        "column": 8,
        "endLine": 826,
        "endColumn": 14,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_schema_from_url",
        "line": 832,
        "column": 47,
        "endLine": 832,
        "endColumn": 53,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.normalize_name",
        "line": 846,
        "column": 8,
        "endLine": 853,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "no-else-return",
        "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1705"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.normalize_name",
        "line": 846,
        "column": 40,
        "endLine": 846,
        "endColumn": 81,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _requires_quotes of a client class",
        "message-id": "W0212"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.denormalize_name",
        "line": 860,
        "column": 8,
        "endLine": 865,
        "endColumn": 31,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "no-else-return",
        "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1705"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.denormalize_name",
        "line": 862,
        "column": 42,
        "endLine": 862,
        "endColumn": 83,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _requires_quotes of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_isolation_level",
        "line": 868,
        "column": 4,
        "endLine": 868,
        "endColumn": 27,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "arguments-renamed",
        "message": "Parameter 'dbapi_conn' has been renamed to 'connection' in overriding 'EXADialect.get_isolation_level' method",
        "message-id": "W0237"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_isolation_level",
        "line": 868,
        "column": 34,
        "endLine": 868,
        "endColumn": 44,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'connection'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_schema_names_query",
        "line": 875,
        "column": 38,
        "endLine": 875,
        "endColumn": 48,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'connection'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_schema_names_query",
        "line": 875,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'kw'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_schema_names",
        "line": 880,
        "column": 4,
        "endLine": 880,
        "endColumn": 24,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_schema_for_input_or_current",
        "line": 885,
        "column": 59,
        "endLine": 885,
        "endColumn": 65,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_schema_for_input",
        "line": 891,
        "column": 48,
        "endLine": 891,
        "endColumn": 54,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_table_names",
        "line": 903,
        "column": 4,
        "endLine": 903,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "signature-differs",
        "message": "Signature differs from overridden 'get_table_names' method",
        "message-id": "W0222"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_table_names",
        "line": 903,
        "column": 42,
        "endLine": 903,
        "endColumn": 48,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.has_table",
        "line": 919,
        "column": 48,
        "endLine": 919,
        "endColumn": 54,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_view_names",
        "line": 939,
        "column": 41,
        "endLine": 939,
        "endColumn": 47,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_view_definition",
        "line": 953,
        "column": 57,
        "endLine": 953,
        "endColumn": 63,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.quote_string_value",
        "line": 968,
        "column": 4,
        "endLine": 968,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.quote_string_value",
        "line": 969,
        "column": 15,
        "endLine": 969,
        "endColumn": 21,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_column_sql_query_str",
        "line": 972,
        "column": 4,
        "endLine": 972,
        "endColumn": 32,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_columns",
        "line": 994,
        "column": 51,
        "endLine": 994,
        "endColumn": 57,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_columns",
        "line": 994,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'kw'",
        "message-id": "W0613"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_columns",
        "line": 1009,
        "column": 4,
        "endLine": 1009,
        "endColumn": 19,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "too-many-locals",
        "message": "Too many local variables (18/15)",
        "message-id": "R0914"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_columns",
        "line": 1009,
        "column": 50,
        "endLine": 1009,
        "endColumn": 56,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_columns",
        "line": 1023,
        "column": 16,
        "endLine": 1023,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'default' from outer scope (line 65)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_constraint_sql_str",
        "line": 1075,
        "column": 32,
        "endLine": 1075,
        "endColumn": 38,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_pk_constraint",
        "line": 1094,
        "column": 57,
        "endLine": 1094,
        "endColumn": 63,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_pk_constraint",
        "line": 1094,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'kw'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_pk_constraint",
        "line": 1122,
        "column": 56,
        "endLine": 1122,
        "endColumn": 62,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_foreign_keys",
        "line": 1128,
        "column": 56,
        "endLine": 1128,
        "endColumn": 62,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect._get_foreign_keys",
        "line": 1128,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'kw'",
        "message-id": "W0613"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_foreign_keys",
        "line": 1142,
        "column": 4,
        "endLine": 1142,
        "endColumn": 24,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "too-many-locals",
        "message": "Too many local variables (19/15)",
        "message-id": "R0914"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_foreign_keys",
        "line": 1142,
        "column": 55,
        "endLine": 1142,
        "endColumn": 61,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "EXADialect.get_indexes",
        "line": 1193,
        "column": 50,
        "endLine": 1193,
        "endColumn": 56,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'schema' from outer scope (line 58)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 51,
        "column": 0,
        "endLine": 54,
        "endColumn": 1,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-import",
        "message": "Unused date imported from datetime",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 51,
        "column": 0,
        "endLine": 54,
        "endColumn": 1,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-import",
        "message": "Unused datetime imported from datetime",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.base",
        "obj": "",
        "line": 55,
        "column": 0,
        "endLine": 55,
        "endColumn": 27,
        "path": "sqlalchemy_exasol/base.py",
        "symbol": "unused-import",
        "message": "Unused Decimal imported from decimal",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.version",
        "obj": "",
        "line": 2,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/version.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.version",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/version.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.version",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/version.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.requirements",
        "obj": "",
        "line": 191,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/requirements.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.requirements",
        "obj": "",
        "line": 241,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/requirements.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.requirements",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/requirements.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.requirements",
        "obj": "Requirements",
        "line": 9,
        "column": 0,
        "endLine": 9,
        "endColumn": 18,
        "path": "sqlalchemy_exasol/requirements.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.requirements",
        "obj": "Requirements",
        "line": 9,
        "column": 0,
        "endLine": 9,
        "endColumn": 18,
        "path": "sqlalchemy_exasol/requirements.py",
        "symbol": "abstract-method",
        "message": "Method 'get_order_by_collation' is abstract in class 'SuiteRequirements' but is not overridden in child class 'Requirements'",
        "message-id": "W0223"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.requirements",
        "obj": "Requirements.broken_cx_oracle6_numerics",
        "line": 178,
        "column": 4,
        "endLine": 178,
        "endColumn": 34,
        "path": "sqlalchemy_exasol/requirements.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol.requirements",
        "obj": "Requirements.broken_cx_oracle6_numerics",
        "line": 178,
        "column": 4,
        "endLine": 178,
        "endColumn": 34,
        "path": "sqlalchemy_exasol/requirements.py",
        "symbol": "no-self-argument",
        "message": "Method 'broken_cx_oracle6_numerics' should have \"self\" as first argument",
        "message-id": "E0213"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.requirements",
        "obj": "Requirements",
        "line": 9,
        "column": 0,
        "endLine": 9,
        "endColumn": 18,
        "path": "sqlalchemy_exasol/requirements.py",
        "symbol": "too-many-public-methods",
        "message": "Too many public methods (37/20)",
        "message-id": "R0904"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 10,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'BLOB' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'BOOLEAN' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 10,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'CHAR' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 10,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'DATE' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 17,
        "column": 4,
        "endLine": 17,
        "endColumn": 14,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'DATETIME' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 18,
        "column": 4,
        "endLine": 18,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'DECIMAL' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 11,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'FLOAT' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 20,
        "column": 4,
        "endLine": 20,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'INTEGER' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'NUMERIC' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 22,
        "column": 4,
        "endLine": 22,
        "endColumn": 14,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'SMALLINT' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 23,
        "column": 4,
        "endLine": 23,
        "endColumn": 10,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'TEXT' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 24,
        "column": 4,
        "endLine": 24,
        "endColumn": 10,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'TIME' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 15,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'TIMESTAMP' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'VARCHAR' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'dialect' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol",
        "obj": "",
        "line": 28,
        "column": 4,
        "endLine": 28,
        "endColumn": 10,
        "path": "sqlalchemy_exasol/__init__.py",
        "symbol": "undefined-all-variable",
        "message": "Undefined variable name 'REAL' in __all__",
        "message-id": "E0603"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.util",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.util",
        "obj": "raw_sql.LiteralCompiler",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.util",
        "obj": "raw_sql.LiteralCompiler",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "abstract-method",
        "message": "Method 'delete_extra_from_clause' is abstract in class 'SQLCompiler' but is not overridden in child class 'LiteralCompiler'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.util",
        "obj": "raw_sql.LiteralCompiler",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "abstract-method",
        "message": "Method 'update_from_clause' is abstract in class 'SQLCompiler' but is not overridden in child class 'LiteralCompiler'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.util",
        "obj": "raw_sql.LiteralCompiler",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 25,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "abstract-method",
        "message": "Method 'visit_sequence' is abstract in class 'SQLCompiler' but is not overridden in child class 'LiteralCompiler'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.util",
        "obj": "raw_sql.LiteralCompiler.visit_bindparam",
        "line": 20,
        "column": 8,
        "endLine": 20,
        "endColumn": 27,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "arguments-differ",
        "message": "Number of parameters was 8 in 'SQLCompiler.visit_bindparam' and is now 5 in overriding 'LiteralCompiler.visit_bindparam' method",
        "message-id": "W0221"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.util",
        "obj": "raw_sql.LiteralCompiler.render_literal_value",
        "line": 31,
        "column": 12,
        "endLine": 46,
        "endColumn": 33,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "no-else-return",
        "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1705"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.util",
        "obj": "raw_sql.LiteralCompiler.render_literal_value",
        "line": 34,
        "column": 23,
        "endLine": 34,
        "endColumn": 34,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.util",
        "obj": "raw_sql.LiteralCompiler.render_literal_value",
        "line": 37,
        "column": 17,
        "endLine": 37,
        "endColumn": 45,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "unidiomatic-typecheck",
        "message": "Use isinstance() rather than type() for a typecheck.",
        "message-id": "C0123"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.util",
        "obj": "raw_sql.LiteralCompiler.render_literal_value",
        "line": 38,
        "column": 23,
        "endLine": 38,
        "endColumn": 57,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.util",
        "obj": "raw_sql.LiteralCompiler.render_literal_value",
        "line": 41,
        "column": 17,
        "endLine": 41,
        "endColumn": 49,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "unidiomatic-typecheck",
        "message": "Use isinstance() rather than type() for a typecheck.",
        "message-id": "C0123"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.util",
        "obj": "raw_sql.LiteralCompiler.render_literal_value",
        "line": 42,
        "column": 23,
        "endLine": 42,
        "endColumn": 77,
        "path": "sqlalchemy_exasol/util.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Integer",
        "line": 17,
        "column": 0,
        "endLine": 17,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Integer.result_processor",
        "line": 18,
        "column": 31,
        "endLine": 18,
        "endColumn": 38,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 158)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Decimal",
        "line": 27,
        "column": 0,
        "endLine": 27,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Decimal.bind_processor",
        "line": 28,
        "column": 4,
        "endLine": 28,
        "endColumn": 22,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "useless-parent-delegation",
        "message": "Useless parent or super() delegation in method 'bind_processor'",
        "message-id": "W0246"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Decimal.bind_processor",
        "line": 28,
        "column": 29,
        "endLine": 28,
        "endColumn": 36,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 158)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Decimal.result_processor",
        "line": 31,
        "column": 31,
        "endLine": 31,
        "endColumn": 38,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 158)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Decimal.result_processor",
        "line": 35,
        "column": 18,
        "endLine": 35,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Decimal.result_processor.to_decimal",
        "line": 38,
        "column": 12,
        "endLine": 45,
        "endColumn": 45,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "no-else-return",
        "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1705"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Date",
        "line": 50,
        "column": 0,
        "endLine": 50,
        "endColumn": 10,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Date.bind_processor",
        "line": 51,
        "column": 4,
        "endLine": 51,
        "endColumn": 22,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "useless-parent-delegation",
        "message": "Useless parent or super() delegation in method 'bind_processor'",
        "message-id": "W0246"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Date.bind_processor",
        "line": 51,
        "column": 29,
        "endLine": 51,
        "endColumn": 36,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 158)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "Date.result_processor",
        "line": 54,
        "column": 31,
        "endLine": 54,
        "endColumn": 38,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 158)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "DateTime",
        "line": 63,
        "column": 0,
        "endLine": 63,
        "endColumn": 14,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "DateTime.bind_processor",
        "line": 64,
        "column": 4,
        "endLine": 64,
        "endColumn": 22,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "useless-parent-delegation",
        "message": "Useless parent or super() delegation in method 'bind_processor'",
        "message-id": "W0246"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "DateTime.bind_processor",
        "line": 64,
        "column": 29,
        "endLine": 64,
        "endColumn": 36,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 158)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "DateTime.result_processor",
        "line": 67,
        "column": 31,
        "endLine": 67,
        "endColumn": 38,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dialect' from outer scope (line 158)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "invalid-name",
        "message": "Class name \"EXADialect_websocket\" doesn't conform to PascalCase naming style",
        "message-id": "C0103"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'do_begin_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'do_commit_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'do_prepare_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'do_recover_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'do_rollback_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'do_set_input_sizes' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'get_check_constraints' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'get_sequence_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'get_table_comment' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'get_temp_table_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'get_temp_view_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'get_unique_constraints' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'has_sequence' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket",
        "line": 88,
        "column": 0,
        "endLine": 88,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "abstract-method",
        "message": "Method 'set_isolation_level' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_websocket'",
        "message-id": "W0223"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket.dbapi",
        "line": 99,
        "column": 4,
        "endLine": 99,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "error",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket.dbapi",
        "line": 99,
        "column": 4,
        "endLine": 99,
        "endColumn": 13,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "method-hidden",
        "message": "An attribute defined in sqlalchemy.engine.default line 305 hides this method",
        "message-id": "E0202"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket.create_connect_args.certificate_validation",
        "line": 119,
        "column": 19,
        "endLine": 119,
        "endColumn": 68,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "simplifiable-if-expression",
        "message": "The if expression can be replaced with 'bool(test)'",
        "message-id": "R1719"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "EXADialect_websocket.create_connect_args",
        "line": 149,
        "column": 17,
        "endLine": 149,
        "endColumn": 66,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "use-dict-literal",
        "message": "Consider using '{**ChainMap(user_settings, kwargs, defaults)}' instead of a call to 'dict'.",
        "message-id": "R1735"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.websocket",
        "obj": "",
        "line": 158,
        "column": 0,
        "endLine": 158,
        "endColumn": 7,
        "path": "sqlalchemy_exasol/websocket.py",
        "symbol": "invalid-name",
        "message": "Class name \"dialect\" doesn't conform to PascalCase naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "",
        "line": 68,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "",
        "line": 70,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "",
        "line": 74,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "",
        "line": 78,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "",
        "line": 241,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "",
        "line": 242,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "",
        "line": 281,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (103/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "invalid-name",
        "message": "Class name \"EXADialect_pyodbc\" doesn't conform to PascalCase naming style",
        "message-id": "C0103"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_begin_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_commit_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_prepare_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_recover_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_rollback_twophase' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'do_set_input_sizes' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_check_constraints' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_sequence_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_table_comment' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_temp_table_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_temp_view_names' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'get_unique_constraints' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'has_sequence' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "warning",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 23,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "abstract-method",
        "message": "Method 'set_isolation_level' is abstract in class 'Dialect' but is not overridden in child class 'EXADialect_pyodbc'",
        "message-id": "W0223"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc.get_driver_version",
        "line": 42,
        "column": 4,
        "endLine": 42,
        "endColumn": 26,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc.create_connect_args",
        "line": 93,
        "column": 26,
        "endLine": 93,
        "endColumn": 34,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc.create_connect_args",
        "line": 99,
        "column": 19,
        "endLine": 99,
        "endColumn": 24,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc.create_connect_args",
        "line": 103,
        "column": 16,
        "endLine": 103,
        "endColumn": 30,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc.create_connect_args",
        "line": 104,
        "column": 16,
        "endLine": 104,
        "endColumn": 30,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc.create_connect_args",
        "line": 110,
        "column": 30,
        "endLine": 110,
        "endColumn": 38,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc.create_connect_args",
        "line": 111,
        "column": 30,
        "endLine": 111,
        "endColumn": 38,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc.create_connect_args",
        "line": 120,
        "column": 30,
        "endLine": 120,
        "endColumn": 48,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "refactor",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc._tables_for_schema",
        "line": 176,
        "column": 19,
        "endLine": 176,
        "endColumn": 48,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "unnecessary-comprehension",
        "message": "Unnecessary use of a comprehension, use list(table_cursor) instead.",
        "message-id": "R1721"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc._get_columns",
        "line": 247,
        "column": 24,
        "endLine": 247,
        "endColumn": 56,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "EXADialect_pyodbc._get_foreign_keys",
        "line": 293,
        "column": 24,
        "endLine": 293,
        "endColumn": 56,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.pyodbc",
        "obj": "",
        "line": 303,
        "column": 0,
        "endLine": 303,
        "endColumn": 7,
        "path": "sqlalchemy_exasol/pyodbc.py",
        "symbol": "invalid-name",
        "message": "Class name \"dialect\" doesn't conform to PascalCase naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.constraints",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "sqlalchemy_exasol/constraints.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "sqlalchemy_exasol.constraints",
        "obj": "DistributeByConstraint",
        "line": 4,
        "column": 0,
        "endLine": 4,
        "endColumn": 28,
        "path": "sqlalchemy_exasol/constraints.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/conftest.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "regression.test_regression_bug390",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/regression/test_regression_bug390.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "regression.test_regression_bug390",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/regression/test_regression_bug390.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "regression.test_regression_bug390",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/regression/test_regression_bug390.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "regression.test_regression_bug390",
        "obj": "",
        "line": 3,
        "column": 0,
        "endLine": 3,
        "endColumn": 14,
        "path": "test/integration/regression/test_regression_bug390.py",
        "symbol": "invalid-name",
        "message": "Constant name \"pytest_plugins\" doesn't conform to UPPER_CASE naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "regression.test_regression_bug390",
        "obj": "test_connection_with_block_cleans_up_properly",
        "line": 6,
        "column": 0,
        "endLine": 6,
        "endColumn": 49,
        "path": "test/integration/regression/test_regression_bug390.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "regression.test_regression_bug335",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/regression/test_regression_bug335.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "regression.test_regression_bug335",
        "obj": "",
        "line": 57,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/regression/test_regression_bug335.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "regression.test_regression_bug335",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/regression/test_regression_bug335.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "regression.test_regression_bug335",
        "obj": "pyodbc_connection_string",
        "line": 22,
        "column": 0,
        "endLine": 22,
        "endColumn": 28,
        "path": "test/integration/regression/test_regression_bug335.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "regression.test_regression_bug335",
        "obj": "test_schema",
        "line": 32,
        "column": 0,
        "endLine": 32,
        "endColumn": 15,
        "path": "test/integration/regression/test_regression_bug335.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "regression.test_regression_bug335",
        "obj": "users_table",
        "line": 43,
        "column": 0,
        "endLine": 43,
        "endColumn": 15,
        "path": "test/integration/regression/test_regression_bug335.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "regression.test_regression_bug335",
        "obj": "users_table",
        "line": 43,
        "column": 36,
        "endLine": 43,
        "endColumn": 47,
        "path": "test/integration/regression/test_regression_bug335.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'test_schema' from outer scope (line 32)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "regression.test_regression_bug335",
        "obj": "test_lastrowid_does_not_create_extra_commit",
        "line": 54,
        "column": 19,
        "endLine": 54,
        "endColumn": 30,
        "path": "test/integration/regression/test_regression_bug335.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'users_table' from outer scope (line 43)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "regression.test_regression_bug335",
        "obj": "test_lastrowid_does_not_create_extra_commit",
        "line": 54,
        "column": 32,
        "endLine": 54,
        "endColumn": 56,
        "path": "test/integration/regression/test_regression_bug335.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'pyodbc_connection_string' from outer scope (line 22)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "regression.test_regression_bug335",
        "obj": "test_lastrowid_does_not_create_extra_commit",
        "line": 54,
        "column": 4,
        "endLine": 54,
        "endColumn": 17,
        "path": "test/integration/regression/test_regression_bug335.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'exasol_config'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "",
        "line": 68,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "",
        "line": 72,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "line-too-long",
        "message": "Line too long (133/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "",
        "line": 74,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "",
        "line": 97,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "",
        "line": 115,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "",
        "line": 130,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "",
        "line": 204,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "warning",
        "module": "test_suite",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": 22,
        "endColumn": 38,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "wildcard-import",
        "message": "Wildcard import sqlalchemy.testing.suite",
        "message-id": "W0401"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "RowFetchTest",
        "line": 28,
        "column": 0,
        "endLine": 28,
        "endColumn": 18,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "RowFetchTest",
        "line": 28,
        "column": 0,
        "endLine": 28,
        "endColumn": 18,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "HasTableTest",
        "line": 44,
        "column": 0,
        "endLine": 44,
        "endColumn": 18,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "HasTableTest",
        "line": 44,
        "column": 0,
        "endLine": 44,
        "endColumn": 18,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "warning",
        "module": "test_suite",
        "obj": "HasTableTest.define_views",
        "line": 46,
        "column": 26,
        "endLine": 46,
        "endColumn": 34,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'metadata' from outer scope (line 22)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "HasTableTest.define_views",
        "line": 54,
        "column": 16,
        "endLine": 54,
        "endColumn": 77,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "HasTableTest.define_views",
        "line": 63,
        "column": 20,
        "endLine": 63,
        "endColumn": 37,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "InsertBehaviorTest",
        "line": 90,
        "column": 0,
        "endLine": 90,
        "endColumn": 24,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "InsertBehaviorTest",
        "line": 90,
        "column": 0,
        "endLine": 90,
        "endColumn": 24,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "RowCountTest",
        "line": 112,
        "column": 0,
        "endLine": 112,
        "endColumn": 18,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "RowCountTest",
        "line": 112,
        "column": 0,
        "endLine": 112,
        "endColumn": 18,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "DifficultParametersTest",
        "line": 178,
        "column": 0,
        "endLine": 178,
        "endColumn": 29,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "DifficultParametersTest",
        "line": 178,
        "column": 0,
        "endLine": 178,
        "endColumn": 29,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "warning",
        "module": "test_suite",
        "obj": "DifficultParametersTest.test_round_trip_same_named_column",
        "line": 203,
        "column": 71,
        "endLine": 203,
        "endColumn": 79,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'metadata' from outer scope (line 22)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "ComponentReflectionTest",
        "line": 208,
        "column": 0,
        "endLine": 208,
        "endColumn": 29,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "ComponentReflectionTest",
        "line": 208,
        "column": 0,
        "endLine": 208,
        "endColumn": 29,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "ComponentReflectionTest.test_get_indexes",
        "line": 211,
        "column": 8,
        "endLine": 211,
        "endColumn": 34,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "no-value-for-parameter",
        "message": "No value for argument 'connection' in method call",
        "message-id": "E1120"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "ComponentReflectionTest.test_get_indexes",
        "line": 211,
        "column": 8,
        "endLine": 211,
        "endColumn": 34,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "no-value-for-parameter",
        "message": "No value for argument 'use_schema' in method call",
        "message-id": "E1120"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "HasIndexTest",
        "line": 214,
        "column": 0,
        "endLine": 214,
        "endColumn": 18,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "HasIndexTest",
        "line": 214,
        "column": 0,
        "endLine": 214,
        "endColumn": 18,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "LongNameBlowoutTest",
        "line": 227,
        "column": 0,
        "endLine": 227,
        "endColumn": 25,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "LongNameBlowoutTest",
        "line": 227,
        "column": 0,
        "endLine": 227,
        "endColumn": 25,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "warning",
        "module": "test_suite",
        "obj": "LongNameBlowoutTest.test_long_convention_name",
        "line": 240,
        "column": 4,
        "endLine": 240,
        "endColumn": 33,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "arguments-differ",
        "message": "Number of parameters was 4 in 'LongNameBlowoutTest.test_long_convention_name' and is now 3 in overriding 'LongNameBlowoutTest.test_long_convention_name' method",
        "message-id": "W0221"
    },
    {
        "type": "warning",
        "module": "test_suite",
        "obj": "LongNameBlowoutTest.test_long_convention_name",
        "line": 241,
        "column": 8,
        "endLine": 241,
        "endColumn": 16,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'metadata' from outer scope (line 22)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "CompoundSelectTest",
        "line": 255,
        "column": 0,
        "endLine": 255,
        "endColumn": 24,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "CompoundSelectTest",
        "line": 255,
        "column": 0,
        "endLine": 255,
        "endColumn": 24,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "CompoundSelectTest.test_null_in_empty_set_is_false",
        "line": 263,
        "column": 4,
        "endLine": 263,
        "endColumn": 39,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "ExceptionTest",
        "line": 267,
        "column": 0,
        "endLine": 267,
        "endColumn": 19,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "ExceptionTest",
        "line": 267,
        "column": 0,
        "endLine": 267,
        "endColumn": 19,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "ExceptionTest.test_integrity_error_raw_sql",
        "line": 287,
        "column": 4,
        "endLine": 287,
        "endColumn": 36,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "ExpandingBoundInTest",
        "line": 295,
        "column": 0,
        "endLine": 295,
        "endColumn": 26,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "ExpandingBoundInTest",
        "line": 295,
        "column": 0,
        "endLine": 295,
        "endColumn": 26,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "ExpandingBoundInTest.test_null_in_empty_set_is_false",
        "line": 303,
        "column": 4,
        "endLine": 303,
        "endColumn": 39,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "NumericTest",
        "line": 307,
        "column": 0,
        "endLine": 307,
        "endColumn": 17,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "NumericTest",
        "line": 307,
        "column": 0,
        "endLine": 307,
        "endColumn": 17,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "convention",
        "module": "test_suite",
        "obj": "QuotedNameArgumentTest",
        "line": 323,
        "column": 0,
        "endLine": 323,
        "endColumn": 28,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_suite",
        "obj": "QuotedNameArgumentTest",
        "line": 323,
        "column": 0,
        "endLine": 323,
        "endColumn": 28,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "function-redefined",
        "message": "class already defined line 22",
        "message-id": "E0102"
    },
    {
        "type": "warning",
        "module": "test_suite",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": 22,
        "endColumn": 38,
        "path": "test/integration/sqlalchemy/test_suite.py",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) RowFetchTest, HasTableTest, InsertBehaviorTest, RowCountTest, DifficultParametersTest, ComponentReflectionTest, HasIndexTest, LongNameBlowoutTest, CompoundSelectTest, ExceptionTest, ExpandingBoundInTest, NumericTest, QuotedNameArgumentTest, CTETest, fixtures, Column, Table, ForeignKey, Integer, select, String, random, TableDDLTest, FutureTableDDLTest, util, is_false, is_true, CheckConstraint, ForeignKeyConstraint, Index, inspect, schema, UniqueConstraint, DeprecatedCompoundSelectTest, union, IsolationLevelTest, AutocommitIsolationTest, EscapingTest, WeCanSetDefaultSchemaWEventsTest, FutureWeCanSetDefaultSchemaWEventsTest, engines, ne_, provide_metadata, set_default_schema_on_connection, bindparam, literal_column, compat, LastrowidTest, ReturningTest, literal, operator, re, sa, metadata, users, OneConnectionTablesTest, TableNoColumnsTest, ComponentReflectionTestExtra, NormalizedNameTest, ComputedReflectionTest, IdentityReflectionTest, CompositeKeyReflectionTest, expect_warnings, is_, get_temp_table_name, temp_table_keyword_args, func, Identity, MetaData, sql_types, quoted_name, BLANK_SCHEMA, datetime, PercentSchemaNamesTest, ServerSideCursorsTest, DateTime, sql, itertools, CollateTest, OrderByLabelTest, ValuesExpressionTest, FetchLimitOffsetTest, JoinTest, PostCompileParamsTest, LikeFunctionsTest, ComputedColumnTest, IdentityColumnTest, IdentityAutoincrementTest, ExistsTest, DistinctOnTest, IsOrIsNotDistinctFromTest, WindowFunctionTest, AssertsCompiledSQL, AssertsExecutionResults, in_, CursorSQL, case, column, Computed, exists, false, null, table, true, tuple_, TupleType, values, DatabaseError, ProgrammingError, collections_abc, SequenceTest, SequenceCompilerTest, HasSequenceTest, HasSequenceTestEmpty, Sequence, decimal, json, UnicodeVarcharTest, UnicodeTextTest, BinaryTest, TextTest, StringTest, DateTimeTest, DateTimeTZTest, DateTimeMicrosecondsTest, TimestampMicrosecondsTest, TimeTest, TimeTZTest, TimeMicrosecondsTest, DateTest, DateTimeCoercedToDateTimeTest, DateTimeHistoricTest, DateHistoricTest, IntegerTest, CastTypeDecoratorTest, BooleanTest, JSONTest, JSONLegacyStringCastIndexTest, mock, and_, BigInteger, Boolean, cast, Date, Float, JSON, Numeric, Text, Time, TIMESTAMP, TypeDecorator, Unicode, UnicodeText, declarative_base, Session, LargeBinary, PickleType, u, UnicodeSchemaTest, t1, t2, t3, desc, ue and SimpleUpdateDeleteTest from wildcard import of sqlalchemy.testing.suite",
        "message-id": "W0614"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/sqlalchemy/conftest.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "warning",
        "module": "conftest",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": 16,
        "endColumn": 52,
        "path": "test/integration/sqlalchemy/conftest.py",
        "symbol": "wildcard-import",
        "message": "Wildcard import sqlalchemy.testing.plugin.pytestplugin",
        "message-id": "W0401"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": 16,
        "endColumn": 52,
        "path": "test/integration/sqlalchemy/conftest.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from sqlalchemy.testing.plugin.pytestplugin import *\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": 19,
        "endColumn": 1,
        "path": "test/integration/sqlalchemy/conftest.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from sqlalchemy.testing.plugin.pytestplugin import pytest_sessionfinish as _pytest_sessionfinish\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": 22,
        "endColumn": 1,
        "path": "test/integration/sqlalchemy/conftest.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from sqlalchemy.testing.plugin.pytestplugin import pytest_sessionstart as _pytest_sessionstart\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "pytest_sessionstart",
        "line": 38,
        "column": 0,
        "endLine": 38,
        "endColumn": 23,
        "path": "test/integration/sqlalchemy/conftest.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "error",
        "module": "conftest",
        "obj": "pytest_sessionstart",
        "line": 38,
        "column": 0,
        "endLine": 38,
        "endColumn": 23,
        "path": "test/integration/sqlalchemy/conftest.py",
        "symbol": "function-redefined",
        "message": "function already defined line 16",
        "message-id": "E0102"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "pytest_sessionfinish",
        "line": 48,
        "column": 0,
        "endLine": 48,
        "endColumn": 24,
        "path": "test/integration/sqlalchemy/conftest.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "error",
        "module": "conftest",
        "obj": "pytest_sessionfinish",
        "line": 48,
        "column": 0,
        "endLine": 48,
        "endColumn": 24,
        "path": "test/integration/sqlalchemy/conftest.py",
        "symbol": "function-redefined",
        "message": "function already defined line 16",
        "message-id": "E0102"
    },
    {
        "type": "warning",
        "module": "conftest",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": 16,
        "endColumn": 52,
        "path": "test/integration/sqlalchemy/conftest.py",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) pytest_sessionstart, pytest_sessionfinish, plugin_base, argparse, collections, inspect, itertools, operator, os, re, sys, uuid, py2k, reinvent_fixtures_py2k, pytest_addoption, pytest_configure, DUMP_PYANNOTATE, collect_types_fixture, pytest_collection_finish, XDistHooks, pytest_collection_modifyitems, pytest_pycollect_makeitem, pytest_runtest_setup, pytest_runtest_teardown, pytest_runtest_call, pytest_runtest_logreport, setup_class_methods, setup_test_methods, getargspec, PytestFixtureFunctions and update_wrapper from wildcard import of sqlalchemy.testing.plugin.pytestplugin",
        "message-id": "W0614"
    },
    {
        "type": "convention",
        "module": "test_regression",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_regression.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_regression",
        "obj": "",
        "line": 69,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_regression.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_regression",
        "obj": "",
        "line": 100,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_regression.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_regression",
        "obj": "TranslateMap",
        "line": 28,
        "column": 0,
        "endLine": 28,
        "endColumn": 18,
        "path": "test/integration/exasol/test_regression.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_regression",
        "obj": "TranslateMap.setup_class",
        "line": 30,
        "column": 4,
        "endLine": 30,
        "endColumn": 19,
        "path": "test/integration/exasol/test_regression.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_regression",
        "obj": "TranslateMap.teardown_class",
        "line": 47,
        "column": 4,
        "endLine": 47,
        "endColumn": 22,
        "path": "test/integration/exasol/test_regression.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_regression",
        "obj": "Introspection.setup_class",
        "line": 80,
        "column": 4,
        "endLine": 80,
        "endColumn": 19,
        "path": "test/integration/exasol/test_regression.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_regression",
        "obj": "Introspection.teardown_class",
        "line": 111,
        "column": 4,
        "endLine": 111,
        "endColumn": 22,
        "path": "test/integration/exasol/test_regression.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_regression",
        "obj": "Introspection.test_introspection_of_tables_works_with",
        "line": 129,
        "column": 4,
        "endLine": 129,
        "endColumn": 47,
        "path": "test/integration/exasol/test_regression.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_regression",
        "obj": "Introspection.test_introspection_of_views_works_with",
        "line": 137,
        "column": 4,
        "endLine": 137,
        "endColumn": 46,
        "path": "test/integration/exasol/test_regression.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (132/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (131/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 54,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 65,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (132/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 74,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 76,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (147/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 87,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (129/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 96,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 98,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (129/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 107,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 109,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (129/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 124,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "line-too-long",
        "message": "Line too long (136/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest",
        "line": 17,
        "column": 0,
        "endLine": 17,
        "endColumn": 27,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest",
        "line": 17,
        "column": 0,
        "endLine": 17,
        "endColumn": 27,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "invalid-name",
        "message": "Class name \"EXADialect_pyodbcTest\" doesn't conform to PascalCase naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.setup_method",
        "line": 18,
        "column": 4,
        "endLine": 18,
        "endColumn": 20,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.assert_parsed",
        "line": 22,
        "column": 4,
        "endLine": 22,
        "endColumn": 21,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_create_connect_args",
        "line": 28,
        "column": 4,
        "endLine": 28,
        "endColumn": 32,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_create_connect_args_with_driver",
        "line": 39,
        "column": 4,
        "endLine": 39,
        "endColumn": 44,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_create_connect_args_dsn",
        "line": 50,
        "column": 4,
        "endLine": 50,
        "endColumn": 36,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_create_connect_args_trusted",
        "line": 61,
        "column": 4,
        "endLine": 61,
        "endColumn": 40,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_create_connect_args_autotranslate",
        "line": 72,
        "column": 4,
        "endLine": 72,
        "endColumn": 46,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_create_connect_args_with_param",
        "line": 83,
        "column": 4,
        "endLine": 83,
        "endColumn": 43,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_create_connect_args_with_param_multiple",
        "line": 94,
        "column": 4,
        "endLine": 94,
        "endColumn": 52,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_create_connect_args_with_unknown_params",
        "line": 105,
        "column": 4,
        "endLine": 105,
        "endColumn": 52,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_is_disconnect",
        "line": 117,
        "column": 4,
        "endLine": 117,
        "endColumn": 26,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "info",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_is_disconnect",
        "line": 119,
        "column": 27,
        "endLine": 119,
        "endColumn": 40,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "c-extension-no-member",
        "message": "Module 'pyodbc' has no 'Cursor' member, but source is unavailable. Consider adding this module to extension-pkg-allow-list if you want to perform analysis based on run-time introspection of living objects.",
        "message-id": "I1101"
    },
    {
        "type": "info",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_is_disconnect",
        "line": 122,
        "column": 12,
        "endLine": 122,
        "endColumn": 24,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "c-extension-no-member",
        "message": "Module 'pyodbc' has no 'Error' member, but source is unavailable. Consider adding this module to extension-pkg-allow-list if you want to perform analysis based on run-time introspection of living objects.",
        "message-id": "I1101"
    },
    {
        "type": "info",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.test_is_disconnect",
        "line": 126,
        "column": 12,
        "endLine": 126,
        "endColumn": 24,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "c-extension-no-member",
        "message": "Module 'pyodbc' has no 'Error' member, but source is unavailable. Consider adding this module to extension-pkg-allow-list if you want to perform analysis based on run-time introspection of living objects.",
        "message-id": "I1101"
    },
    {
        "type": "warning",
        "module": "test_exadialect_pyodbc",
        "obj": "EXADialect_pyodbcTest.setup_method",
        "line": 19,
        "column": 8,
        "endLine": 19,
        "endColumn": 20,
        "path": "test/integration/exasol/test_exadialect_pyodbc.py",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'dialect' defined outside __init__",
        "message-id": "W0201"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "",
        "line": 37,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "line-too-long",
        "message": "Line too long (177/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "",
        "line": 59,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest",
        "line": 22,
        "column": 0,
        "endLine": 22,
        "endColumn": 18,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "warning",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.define_tables",
        "line": 32,
        "column": 19,
        "endLine": 32,
        "endColumn": 28,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "message-id": "W0718"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.define_tables",
        "line": 31,
        "column": 26,
        "endLine": 31,
        "endColumn": 50,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "warning",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.define_tables",
        "line": 34,
        "column": 16,
        "endLine": 34,
        "endColumn": 20,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.define_tables",
        "line": 35,
        "column": 22,
        "endLine": 35,
        "endColumn": 40,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.define_tables",
        "line": 37,
        "column": 16,
        "endLine": 37,
        "endColumn": 108,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "warning",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.define_tables",
        "line": 54,
        "column": 19,
        "endLine": 54,
        "endColumn": 28,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "message-id": "W0718"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.define_tables",
        "line": 53,
        "column": 26,
        "endLine": 53,
        "endColumn": 50,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "warning",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.define_tables",
        "line": 56,
        "column": 16,
        "endLine": 56,
        "endColumn": 20,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.define_tables",
        "line": 57,
        "column": 22,
        "endLine": 57,
        "endColumn": 40,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.define_tables",
        "line": 59,
        "column": 16,
        "endLine": 59,
        "endColumn": 110,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.generate_url_with_database_name",
        "line": 83,
        "column": 4,
        "endLine": 83,
        "endColumn": 39,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.generate_url_with_database_name",
        "line": 83,
        "column": 45,
        "endLine": 83,
        "endColumn": 55,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'connection'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.create_engine_with_database_name",
        "line": 93,
        "column": 4,
        "endLine": 93,
        "endColumn": 40,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_schema_names",
        "line": 103,
        "column": 4,
        "endLine": 103,
        "endColumn": 29,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_schema_names_for_sql_and_odbc",
        "line": 115,
        "column": 4,
        "endLine": 115,
        "endColumn": 54,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_table_names",
        "line": 129,
        "column": 4,
        "endLine": 129,
        "endColumn": 28,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_table_names_for_sql_and_odbc",
        "line": 142,
        "column": 4,
        "endLine": 142,
        "endColumn": 53,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_table_names_for_sql_and_odbc",
        "line": 145,
        "column": 26,
        "endLine": 145,
        "endColumn": 42,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_has_table_table_exists",
        "line": 158,
        "column": 4,
        "endLine": 158,
        "endColumn": 35,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_has_table_table_exists",
        "line": 167,
        "column": 30,
        "endLine": 167,
        "endColumn": 74,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_has_table_table_exists_not",
        "line": 174,
        "column": 4,
        "endLine": 174,
        "endColumn": 39,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_has_table_table_exists_not",
        "line": 184,
        "column": 16,
        "endLine": 184,
        "endColumn": 68,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_has_table_for_sql_and_odbc",
        "line": 192,
        "column": 4,
        "endLine": 192,
        "endColumn": 47,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_has_table_for_sql_and_odbc",
        "line": 202,
        "column": 16,
        "endLine": 202,
        "endColumn": 60,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_view_names",
        "line": 210,
        "column": 4,
        "endLine": 210,
        "endColumn": 27,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_view_names_for_sys",
        "line": 223,
        "column": 4,
        "endLine": 223,
        "endColumn": 35,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_view_definition",
        "line": 236,
        "column": 4,
        "endLine": 236,
        "endColumn": 32,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_view_definition_view_name_none",
        "line": 252,
        "column": 4,
        "endLine": 252,
        "endColumn": 47,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_view_names_for_sql_and_odbc",
        "line": 268,
        "column": 4,
        "endLine": 268,
        "endColumn": 52,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_view_names_for_sql_and_odbc",
        "line": 271,
        "column": 22,
        "endLine": 271,
        "endColumn": 38,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_view_definition_for_sql_and_odbc",
        "line": 283,
        "column": 4,
        "endLine": 283,
        "endColumn": 57,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_view_definition_for_sql_and_odbc",
        "line": 286,
        "column": 26,
        "endLine": 286,
        "endColumn": 42,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_columns_for_sql_and_odbc",
        "line": 303,
        "column": 4,
        "endLine": 303,
        "endColumn": 49,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_columns_for_sql_and_odbc",
        "line": 307,
        "column": 26,
        "endLine": 307,
        "endColumn": 42,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_columns_none_table_for_sql_and_odbc",
        "line": 323,
        "column": 4,
        "endLine": 323,
        "endColumn": 60,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_columns_none_table_for_sql_and_odbc",
        "line": 326,
        "column": 26,
        "endLine": 326,
        "endColumn": 42,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "warning",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_columns_none_table_for_sql_and_odbc",
        "line": 332,
        "column": 12,
        "endLine": 332,
        "endColumn": 24,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'columns_odbc'",
        "message-id": "W0612"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.make_columns_comparable",
        "line": 337,
        "column": 4,
        "endLine": 337,
        "endColumn": 31,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_columns",
        "line": 350,
        "column": 4,
        "endLine": 350,
        "endColumn": 24,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_columns_table_name_none",
        "line": 399,
        "column": 4,
        "endLine": 399,
        "endColumn": 40,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_pk_constraint_for_sql_and_odbc",
        "line": 416,
        "column": 4,
        "endLine": 416,
        "endColumn": 55,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_pk_constraint_for_sql_and_odbc",
        "line": 421,
        "column": 26,
        "endLine": 421,
        "endColumn": 42,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_pk_constraint",
        "line": 436,
        "column": 4,
        "endLine": 436,
        "endColumn": 30,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_pk_constraint_table_name_none",
        "line": 455,
        "column": 4,
        "endLine": 455,
        "endColumn": 46,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_foreign_keys_for_sql_and_odbc",
        "line": 472,
        "column": 4,
        "endLine": 472,
        "endColumn": 54,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_compare_get_foreign_keys_for_sql_and_odbc",
        "line": 477,
        "column": 26,
        "endLine": 477,
        "endColumn": 42,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_foreign_keys",
        "line": 492,
        "column": 4,
        "endLine": 492,
        "endColumn": 29,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest.test_get_foreign_keys_table_name_none",
        "line": 518,
        "column": 4,
        "endLine": 518,
        "endColumn": 45,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "refactor",
        "module": "test_get_metadata_functions",
        "obj": "MetadataTest",
        "line": 22,
        "column": 0,
        "endLine": 22,
        "endColumn": 18,
        "path": "test/integration/exasol/test_get_metadata_functions.py",
        "symbol": "too-many-public-methods",
        "message": "Too many public methods (27/20)",
        "message-id": "R0904"
    },
    {
        "type": "convention",
        "module": "test_update",
        "obj": "",
        "line": 130,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_update.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_update",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_update.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "warning",
        "module": "test_update",
        "obj": "",
        "line": 2,
        "column": 0,
        "endLine": 2,
        "endColumn": 24,
        "path": "test/integration/exasol/test_update.py",
        "symbol": "wildcard-import",
        "message": "Wildcard import sqlalchemy",
        "message-id": "W0401"
    },
    {
        "type": "convention",
        "module": "test_update",
        "obj": "_UpdateTestBase.define_tables",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 21,
        "path": "test/integration/exasol/test_update.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_update",
        "obj": "_UpdateTestBase.fixtures",
        "line": 59,
        "column": 4,
        "endLine": 59,
        "endColumn": 16,
        "path": "test/integration/exasol/test_update.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_update",
        "obj": "UpdateTest",
        "line": 87,
        "column": 0,
        "endLine": 87,
        "endColumn": 16,
        "path": "test/integration/exasol/test_update.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "error",
        "module": "test_update",
        "obj": "UpdateTest.test_update_simple",
        "line": 92,
        "column": 16,
        "endLine": 92,
        "endColumn": 27,
        "path": "test/integration/exasol/test_update.py",
        "symbol": "unsubscriptable-object",
        "message": "Value 'self.tables' is unsubscriptable",
        "message-id": "E1136"
    },
    {
        "type": "error",
        "module": "test_update",
        "obj": "UpdateTest.test_update_simple_multiple_rows_rowcount",
        "line": 102,
        "column": 16,
        "endLine": 102,
        "endColumn": 27,
        "path": "test/integration/exasol/test_update.py",
        "symbol": "unsubscriptable-object",
        "message": "Value 'self.tables' is unsubscriptable",
        "message-id": "E1136"
    },
    {
        "type": "warning",
        "module": "test_update",
        "obj": "UpdateTest.test_update_executemany",
        "line": 121,
        "column": 8,
        "endLine": 121,
        "endColumn": 14,
        "path": "test/integration/exasol/test_update.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'values' from outer scope (line 2)",
        "message-id": "W0621"
    },
    {
        "type": "error",
        "module": "test_update",
        "obj": "UpdateTest.test_update_executemany",
        "line": 113,
        "column": 16,
        "endLine": 113,
        "endColumn": 27,
        "path": "test/integration/exasol/test_update.py",
        "symbol": "unsubscriptable-object",
        "message": "Value 'self.tables' is unsubscriptable",
        "message-id": "E1136"
    },
    {
        "type": "warning",
        "module": "test_update",
        "obj": "",
        "line": 2,
        "column": 0,
        "endLine": 2,
        "endColumn": 24,
        "path": "test/integration/exasol/test_update.py",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) create_engine, create_mock_engine, engine_from_config, inspect, BLANK_SCHEMA, CheckConstraint, ColumnDefault, Computed, Constraint, DDL, DefaultClause, FetchedValue, ForeignKeyConstraint, Identity, Index, MetaData, PrimaryKeyConstraint, Sequence, ThreadLocalMetaData, UniqueConstraint, alias, all_, and_, any_, asc, between, case, cast, collate, column, delete, desc, distinct, except_, except_all, exists, extract, false, func, funcfilter, insert, intersect, intersect_all, join, LABEL_STYLE_DEFAULT, LABEL_STYLE_DISAMBIGUATE_ONLY, LABEL_STYLE_NONE, LABEL_STYLE_TABLENAME_PLUS_COL, lambda_stmt, lateral, literal, literal_column, modifier, not_, null, nulls_first, nulls_last, nullsfirst, nullslast, or_, outerjoin, outparam, over, select, subquery, table, tablesample, text, true, tuple_, type_coerce, union, union_all, update, values, within_group, ARRAY, BIGINT, BigInteger, BINARY, BLOB, BOOLEAN, Boolean, CHAR, CLOB, DATE, Date, DATETIME, DateTime, DECIMAL, Enum, FLOAT, Float, INT, INTEGER, Interval, JSON, LargeBinary, NCHAR, NUMERIC, Numeric, NVARCHAR, PickleType, REAL, SMALLINT, SmallInteger, TEXT, Text, TIME, Time, TIMESTAMP, TupleType, TypeDecorator, Unicode, UnicodeText, VARBINARY and VARCHAR from wildcard import of sqlalchemy",
        "message-id": "W0614"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "",
        "line": 178,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "line-too-long",
        "message": "Line too long (130/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "",
        "line": 226,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "",
        "line": 238,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/88)",
        "message-id": "C0301"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "",
        "line": 16,
        "column": 1,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "fixme",
        "message": "TODO: get_schema_names, get_view_names and get_view_definition didn't cause deadlocks in this scenario",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "",
        "line": 75,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "fixme",
        "message": "TODO: Doesnt produce a deadlock anymore since last commit?",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "",
        "line": 121,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "fixme",
        "message": "TODO: think of other scenarios where metadata deadlocks with view could happen",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "",
        "line": 131,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "fixme",
        "message": "TODO: think of other scenarios where metadata deadlocks with view could happen",
        "message-id": "W0511"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "refactor",
        "module": "test_deadlock",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": 5,
        "endColumn": 36,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "consider-using-from-import",
        "message": "Use 'from sqlalchemy import testing' instead",
        "message-id": "R0402"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest",
        "line": 21,
        "column": 0,
        "endLine": 21,
        "endColumn": 18,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.create_transaction",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 26,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.create_transaction",
        "line": 27,
        "column": 33,
        "endLine": 27,
        "endColumn": 36,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'url'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_table_names_without_fallback",
        "line": 34,
        "column": 4,
        "endLine": 34,
        "endColumn": 61,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_table_names_without_fallback.without_fallback",
        "line": 35,
        "column": 47,
        "endLine": 35,
        "endColumn": 52,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'table'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_deadlock_for_get_table_names_with_fallback",
        "line": 46,
        "column": 4,
        "endLine": 46,
        "endColumn": 55,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_deadlock_for_get_table_names_with_fallback.with_fallback",
        "line": 47,
        "column": 44,
        "endLine": 47,
        "endColumn": 49,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'table'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_table_names_with_fallback",
        "line": 58,
        "column": 4,
        "endLine": 58,
        "endColumn": 58,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_table_names_with_fallback.with_fallback",
        "line": 59,
        "column": 44,
        "endLine": 59,
        "endColumn": 49,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'table'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_columns_without_fallback",
        "line": 65,
        "column": 4,
        "endLine": 65,
        "endColumn": 57,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_columns_with_fallback",
        "line": 74,
        "column": 4,
        "endLine": 74,
        "endColumn": 54,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_pk_constraint_without_fallback",
        "line": 84,
        "column": 4,
        "endLine": 84,
        "endColumn": 63,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_pk_constraint_with_fallback",
        "line": 93,
        "column": 4,
        "endLine": 93,
        "endColumn": 60,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_foreign_keys_without_fallback",
        "line": 102,
        "column": 4,
        "endLine": 102,
        "endColumn": 62,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_foreign_keys_with_fallback",
        "line": 111,
        "column": 4,
        "endLine": 111,
        "endColumn": 59,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_view_names_without_fallback",
        "line": 120,
        "column": 4,
        "endLine": 120,
        "endColumn": 60,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.test_no_deadlock_for_get_view_names_with_fallback",
        "line": 130,
        "column": 4,
        "endLine": 130,
        "endColumn": 57,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.watchdog",
        "line": 140,
        "column": 4,
        "endLine": 140,
        "endColumn": 16,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "refactor",
        "module": "test_deadlock",
        "obj": "MetadataTest.watchdog",
        "line": 143,
        "column": 17,
        "endLine": 143,
        "endColumn": 36,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unnecessary-comprehension",
        "message": "Unnecessary use of a comprehension, use list(rs) instead.",
        "message-id": "R1721"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.watchdog",
        "line": 140,
        "column": 33,
        "endLine": 140,
        "endColumn": 39,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'schema'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_table",
        "line": 163,
        "column": 4,
        "endLine": 163,
        "endColumn": 30,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_table",
        "line": 171,
        "column": 8,
        "endLine": 172,
        "endColumn": 16,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "message-id": "W0702"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_table",
        "line": 164,
        "column": 8,
        "endLine": 164,
        "endColumn": 10,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'c1'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_table",
        "line": 168,
        "column": 8,
        "endLine": 168,
        "endColumn": 15,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'engine0'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_table",
        "line": 187,
        "column": 12,
        "endLine": 187,
        "endColumn": 19,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'engine1'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_table",
        "line": 193,
        "column": 12,
        "endLine": 193,
        "endColumn": 19,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'engine3'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_table",
        "line": 198,
        "column": 12,
        "endLine": 198,
        "endColumn": 19,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'engine2'",
        "message-id": "W0612"
    },
    {
        "type": "convention",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_get_view_names",
        "line": 211,
        "column": 4,
        "endLine": 211,
        "endColumn": 39,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_get_view_names",
        "line": 219,
        "column": 8,
        "endLine": 220,
        "endColumn": 16,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "message-id": "W0702"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_get_view_names",
        "line": 212,
        "column": 8,
        "endLine": 212,
        "endColumn": 10,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'c1'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_get_view_names",
        "line": 216,
        "column": 8,
        "endLine": 216,
        "endColumn": 15,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'engine0'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_get_view_names",
        "line": 233,
        "column": 12,
        "endLine": 233,
        "endColumn": 19,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'engine1'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_get_view_names",
        "line": 241,
        "column": 12,
        "endLine": 241,
        "endColumn": 19,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'engine3'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_get_view_names",
        "line": 246,
        "column": 12,
        "endLine": 246,
        "endColumn": 19,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'engine2'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_table",
        "line": 183,
        "column": 8,
        "endLine": 183,
        "endColumn": 25,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'watchdog_run' defined outside __init__",
        "message-id": "W0201"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_table",
        "line": 205,
        "column": 12,
        "endLine": 205,
        "endColumn": 29,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'watchdog_run' defined outside __init__",
        "message-id": "W0201"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_table",
        "line": 208,
        "column": 8,
        "endLine": 208,
        "endColumn": 25,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'watchdog_run' defined outside __init__",
        "message-id": "W0201"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_get_view_names",
        "line": 229,
        "column": 8,
        "endLine": 229,
        "endColumn": 25,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'watchdog_run' defined outside __init__",
        "message-id": "W0201"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_get_view_names",
        "line": 253,
        "column": 12,
        "endLine": 253,
        "endColumn": 29,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'watchdog_run' defined outside __init__",
        "message-id": "W0201"
    },
    {
        "type": "warning",
        "module": "test_deadlock",
        "obj": "MetadataTest.run_deadlock_for_get_view_names",
        "line": 256,
        "column": 8,
        "endLine": 256,
        "endColumn": 25,
        "path": "test/integration/exasol/test_deadlock.py",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'watchdog_run' defined outside __init__",
        "message-id": "W0201"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/conftest.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "warning",
        "module": "conftest",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": 19,
        "endColumn": 52,
        "path": "test/integration/exasol/conftest.py",
        "symbol": "wildcard-import",
        "message": "Wildcard import sqlalchemy.testing.plugin.pytestplugin",
        "message-id": "W0401"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": 19,
        "endColumn": 52,
        "path": "test/integration/exasol/conftest.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from sqlalchemy.testing.plugin.pytestplugin import *\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": 22,
        "endColumn": 1,
        "path": "test/integration/exasol/conftest.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from sqlalchemy.testing.plugin.pytestplugin import pytest_sessionfinish as _pytest_sessionfinish\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": 25,
        "endColumn": 1,
        "path": "test/integration/exasol/conftest.py",
        "symbol": "wrong-import-position",
        "message": "Import \"from sqlalchemy.testing.plugin.pytestplugin import pytest_sessionstart as _pytest_sessionstart\" should be placed at the top of the module",
        "message-id": "C0413"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "pytest_sessionstart",
        "line": 41,
        "column": 0,
        "endLine": 41,
        "endColumn": 23,
        "path": "test/integration/exasol/conftest.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "error",
        "module": "conftest",
        "obj": "pytest_sessionstart",
        "line": 41,
        "column": 0,
        "endLine": 41,
        "endColumn": 23,
        "path": "test/integration/exasol/conftest.py",
        "symbol": "function-redefined",
        "message": "function already defined line 19",
        "message-id": "E0102"
    },
    {
        "type": "convention",
        "module": "conftest",
        "obj": "pytest_sessionfinish",
        "line": 50,
        "column": 0,
        "endLine": 50,
        "endColumn": 24,
        "path": "test/integration/exasol/conftest.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "error",
        "module": "conftest",
        "obj": "pytest_sessionfinish",
        "line": 50,
        "column": 0,
        "endLine": 50,
        "endColumn": 24,
        "path": "test/integration/exasol/conftest.py",
        "symbol": "function-redefined",
        "message": "function already defined line 19",
        "message-id": "E0102"
    },
    {
        "type": "warning",
        "module": "conftest",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": 19,
        "endColumn": 52,
        "path": "test/integration/exasol/conftest.py",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) pytest_sessionstart, pytest_sessionfinish, plugin_base, argparse, collections, inspect, itertools, operator, os, re, sys, uuid, py2k, reinvent_fixtures_py2k, pytest_addoption, pytest_configure, DUMP_PYANNOTATE, collect_types_fixture, pytest_collection_finish, XDistHooks, pytest_collection_modifyitems, pytest_pycollect_makeitem, pytest_runtest_setup, pytest_runtest_teardown, pytest_runtest_call, pytest_runtest_logreport, setup_class_methods, setup_test_methods, getargspec, PytestFixtureFunctions and update_wrapper from wildcard import of sqlalchemy.testing.plugin.pytestplugin",
        "message-id": "W0614"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "",
        "line": 94,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'not' keyword",
        "message-id": "C0325"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "",
        "line": 113,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'not' keyword",
        "message-id": "C0325"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "",
        "line": 144,
        "column": 63,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "",
        "line": 146,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "line-too-long",
        "message": "Line too long (181/88)",
        "message-id": "C0301"
    },
    {
        "type": "warning",
        "module": "test_exasol",
        "obj": "",
        "line": 90,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "fixme",
        "message": "TODO: check that reflected table object is identical",
        "message-id": "W0511"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "DefaultsTest",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 18,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "DefaultsTest.test_insert_with_default_value",
        "line": 43,
        "column": 4,
        "endLine": 43,
        "endColumn": 38,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "KeywordTest",
        "line": 51,
        "column": 0,
        "endLine": 51,
        "endColumn": 17,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "KeywordTest.test_keywords",
        "line": 54,
        "column": 4,
        "endLine": 54,
        "endColumn": 21,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_exasol",
        "obj": "KeywordTest.test_keywords",
        "line": 59,
        "column": 8,
        "endLine": 59,
        "endColumn": 19,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'db_keywords'",
        "message-id": "W0612"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "AutocommitTest",
        "line": 63,
        "column": 0,
        "endLine": 63,
        "endColumn": 20,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "AutocommitTest.test_trunctate",
        "line": 66,
        "column": 4,
        "endLine": 66,
        "endColumn": 22,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "ConstraintsTest",
        "line": 71,
        "column": 0,
        "endLine": 71,
        "endColumn": 21,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "ConstraintsTest.test_distribute_by_constraint",
        "line": 85,
        "column": 4,
        "endLine": 85,
        "endColumn": 37,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_exasol",
        "obj": "ConstraintsTest.test_distribute_by_constraint",
        "line": 88,
        "column": 8,
        "endLine": 89,
        "endColumn": 24,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "message-id": "W0702"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "ConstraintsTest.test_distribute_by_constraint",
        "line": 95,
        "column": 23,
        "endLine": 95,
        "endColumn": 55,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "singleton-comparison",
        "message": "Comparison 'c['is_distribution_key'] == True' should be 'c['is_distribution_key'] is True' if checking for the singleton value True, or 'c['is_distribution_key']' if testing for truthiness",
        "message-id": "C0121"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "ConstraintsTest.test_distribute_by_constraint",
        "line": 97,
        "column": 23,
        "endLine": 97,
        "endColumn": 56,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "singleton-comparison",
        "message": "Comparison 'c['is_distribution_key'] == False' should be 'c['is_distribution_key'] is False' if checking for the singleton value False, or 'not c['is_distribution_key']' if testing for falsiness",
        "message-id": "C0121"
    },
    {
        "type": "warning",
        "module": "test_exasol",
        "obj": "ConstraintsTest.test_distribute_by_constraint",
        "line": 87,
        "column": 12,
        "endLine": 87,
        "endColumn": 21,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'reflected'",
        "message-id": "W0612"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "ConstraintsTest.test_alter_table_distribute_by",
        "line": 99,
        "column": 4,
        "endLine": 99,
        "endColumn": 38,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "ConstraintsTest.test_alter_table_distribute_by",
        "line": 107,
        "column": 19,
        "endLine": 107,
        "endColumn": 52,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "singleton-comparison",
        "message": "Comparison 'c['is_distribution_key'] == False' should be 'c['is_distribution_key'] is False' if checking for the singleton value False, or 'not c['is_distribution_key']' if testing for falsiness",
        "message-id": "C0121"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "ConstraintsTest.test_alter_table_distribute_by",
        "line": 114,
        "column": 23,
        "endLine": 114,
        "endColumn": 55,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "singleton-comparison",
        "message": "Comparison 'c['is_distribution_key'] == True' should be 'c['is_distribution_key'] is True' if checking for the singleton value True, or 'c['is_distribution_key']' if testing for truthiness",
        "message-id": "C0121"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "ConstraintsTest.test_alter_table_distribute_by",
        "line": 116,
        "column": 23,
        "endLine": 116,
        "endColumn": 56,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "singleton-comparison",
        "message": "Comparison 'c['is_distribution_key'] == False' should be 'c['is_distribution_key'] is False' if checking for the singleton value False, or 'not c['is_distribution_key']' if testing for falsiness",
        "message-id": "C0121"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "UtilTest",
        "line": 119,
        "column": 0,
        "endLine": 119,
        "endColumn": 14,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_exasol",
        "obj": "UtilTest.test_raw_sql",
        "line": 136,
        "column": 4,
        "endLine": 136,
        "endColumn": 20,
        "path": "test/integration/exasol/test_exasol.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest",
        "line": 19,
        "column": 0,
        "endLine": 19,
        "endColumn": 28,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest.setup_method",
        "line": 42,
        "column": 4,
        "endLine": 42,
        "endColumn": 20,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest.assert_parsed",
        "line": 50,
        "column": 4,
        "endLine": 50,
        "endColumn": 21,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest.test_create_connect_args",
        "line": 58,
        "column": 4,
        "endLine": 58,
        "endColumn": 32,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest.test_create_connect_args_with_driver",
        "line": 69,
        "column": 4,
        "endLine": 69,
        "endColumn": 44,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest.test_create_connect_args_dsn_without_user",
        "line": 81,
        "column": 4,
        "endLine": 81,
        "endColumn": 49,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest.test_create_connect_args_dsn",
        "line": 86,
        "column": 4,
        "endLine": 86,
        "endColumn": 36,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest.test_create_connect_args_with_turbodbc_args",
        "line": 93,
        "column": 4,
        "endLine": 93,
        "endColumn": 51,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest.test_create_connect_args_trusted",
        "line": 118,
        "column": 4,
        "endLine": 118,
        "endColumn": 40,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest.test_create_connect_args_with_custom_parameter",
        "line": 125,
        "column": 4,
        "endLine": 125,
        "endColumn": 54,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest.test_create_connect_args_with_parameter_set_to_none",
        "line": 133,
        "column": 4,
        "endLine": 133,
        "endColumn": 59,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_exadialect_turbodbc",
        "obj": "EXADialectTurbodbcTest.test_create_connect_args_overrides_default",
        "line": 139,
        "column": 4,
        "endLine": 139,
        "endColumn": 50,
        "path": "test/integration/exasol/test_exadialect_turbodbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "",
        "line": 58,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "",
        "line": 65,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "",
        "line": 91,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest",
        "line": 16,
        "column": 0,
        "endLine": 16,
        "endColumn": 23,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.create_table_ddl",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 24,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.create_table_ddl",
        "line": 21,
        "column": 19,
        "endLine": 21,
        "endColumn": 41,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.get_table_name",
        "line": 32,
        "column": 4,
        "endLine": 32,
        "endColumn": 22,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_table_object",
        "line": 35,
        "column": 4,
        "endLine": 35,
        "endColumn": 33,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_table_object",
        "line": 41,
        "column": 27,
        "endLine": 41,
        "endColumn": 36,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "message-id": "W0718"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_table_object",
        "line": 40,
        "column": 34,
        "endLine": 40,
        "endColumn": 58,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "warning",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_table_object",
        "line": 43,
        "column": 24,
        "endLine": 43,
        "endColumn": 28,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_table_object",
        "line": 44,
        "column": 30,
        "endLine": 44,
        "endColumn": 48,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_table_object",
        "line": 58,
        "column": 20,
        "endLine": 58,
        "endColumn": 95,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_table_object",
        "line": 65,
        "column": 20,
        "endLine": 65,
        "endColumn": 95,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "warning",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_table_object",
        "line": 55,
        "column": 16,
        "endLine": 55,
        "endColumn": 27,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'users_table'",
        "message-id": "W0612"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_metadata_object",
        "line": 70,
        "column": 4,
        "endLine": 70,
        "endColumn": 36,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_metadata_object",
        "line": 76,
        "column": 27,
        "endLine": 76,
        "endColumn": 36,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "message-id": "W0718"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_metadata_object",
        "line": 75,
        "column": 34,
        "endLine": 75,
        "endColumn": 58,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "warning",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_metadata_object",
        "line": 78,
        "column": 24,
        "endLine": 78,
        "endColumn": 28,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_metadata_object",
        "line": 79,
        "column": 30,
        "endLine": 79,
        "endColumn": 48,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_large_metadata",
        "obj": "LargeMetadataTest.test_reflect_metadata_object",
        "line": 91,
        "column": 20,
        "endLine": 91,
        "endColumn": 107,
        "path": "test/integration/exasol/test_large_metadata.py",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "message-id": "C0209"
    },
    {
        "type": "convention",
        "module": "test_certificate",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_certificate.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_certificate",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_certificate.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_certificate",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/integration/exasol/test_certificate.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "test_certificate",
        "obj": "CertificateTest",
        "line": 15,
        "column": 0,
        "endLine": 15,
        "endColumn": 21,
        "path": "test/integration/exasol/test_certificate.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_certificate",
        "obj": "CertificateTest.test_db_connection_fails_with_default_settings_for_self_signed_certificates",
        "line": 35,
        "column": 4,
        "endLine": 35,
        "endColumn": 83,
        "path": "test/integration/exasol/test_certificate.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "refactor",
        "module": "test_certificate",
        "obj": "CertificateTest.test_db_connection_fails_with_default_settings_for_self_signed_certificates",
        "line": 48,
        "column": 15,
        "endLine": 48,
        "endColumn": 70,
        "path": "test/integration/exasol/test_certificate.py",
        "symbol": "use-a-generator",
        "message": "Use a generator instead 'any(e in actual_message for e in expected_substrings)'",
        "message-id": "R1729"
    },
    {
        "type": "warning",
        "module": "test_certificate",
        "obj": "CertificateTest.test_db_connection_fails_with_default_settings_for_self_signed_certificates",
        "line": 43,
        "column": 37,
        "endLine": 43,
        "endColumn": 41,
        "path": "test/integration/exasol/test_certificate.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'conn'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "test_certificate",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": 1,
        "endColumn": 11,
        "path": "test/integration/exasol/test_certificate.py",
        "symbol": "unused-import",
        "message": "Unused import copy",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "test_websocket",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/unit/exasol/test_websocket.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "test_websocket",
        "obj": "test_create_connection_args",
        "line": 83,
        "column": 0,
        "endLine": 83,
        "endColumn": 31,
        "path": "test/unit/exasol/test_websocket.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_websocket",
        "obj": "test_raises_an_exception_for_invalid_arguments",
        "line": 94,
        "column": 0,
        "endLine": 94,
        "endColumn": 50,
        "path": "test/unit/exasol/test_websocket.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "",
        "line": 100,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "dbapi",
        "line": 22,
        "column": 0,
        "endLine": 22,
        "endColumn": 9,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_defines_api_level",
        "line": 26,
        "column": 0,
        "endLine": 26,
        "endColumn": 26,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_dbapi",
        "obj": "test_defines_api_level",
        "line": 26,
        "column": 27,
        "endLine": 26,
        "endColumn": 32,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dbapi' from outer scope (line 22)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_defines_threadsafety",
        "line": 30,
        "column": 0,
        "endLine": 30,
        "endColumn": 29,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_dbapi",
        "obj": "test_defines_threadsafety",
        "line": 30,
        "column": 30,
        "endLine": 30,
        "endColumn": 35,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dbapi' from outer scope (line 22)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_defines_paramstyle",
        "line": 34,
        "column": 0,
        "endLine": 34,
        "endColumn": 27,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_dbapi",
        "obj": "test_defines_paramstyle",
        "line": 34,
        "column": 28,
        "endLine": 34,
        "endColumn": 33,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dbapi' from outer scope (line 22)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_all_exceptions_are_available",
        "line": 53,
        "column": 0,
        "endLine": 53,
        "endColumn": 37,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_dbapi",
        "obj": "test_all_exceptions_are_available",
        "line": 53,
        "column": 38,
        "endLine": 53,
        "endColumn": 43,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dbapi' from outer scope (line 22)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_date_constructor",
        "line": 58,
        "column": 0,
        "endLine": 58,
        "endColumn": 25,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_dbapi",
        "obj": "test_date_constructor",
        "line": 58,
        "column": 26,
        "endLine": 58,
        "endColumn": 31,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dbapi' from outer scope (line 22)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_time_constructor",
        "line": 65,
        "column": 0,
        "endLine": 65,
        "endColumn": 25,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_dbapi",
        "obj": "test_time_constructor",
        "line": 65,
        "column": 26,
        "endLine": 65,
        "endColumn": 31,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dbapi' from outer scope (line 22)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_timestamp_constructor",
        "line": 75,
        "column": 0,
        "endLine": 75,
        "endColumn": 30,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "refactor",
        "module": "test_dbapi",
        "obj": "test_timestamp_constructor",
        "line": 75,
        "column": 0,
        "endLine": 75,
        "endColumn": 30,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (7/5)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "test_dbapi",
        "obj": "test_timestamp_constructor",
        "line": 75,
        "column": 0,
        "endLine": 75,
        "endColumn": 30,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (7/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "test_dbapi",
        "obj": "test_timestamp_constructor",
        "line": 75,
        "column": 31,
        "endLine": 75,
        "endColumn": 36,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dbapi' from outer scope (line 22)",
        "message-id": "W0621"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_throws_exception_if_no_connection_is_available",
        "line": 81,
        "column": 0,
        "endLine": 81,
        "endColumn": 85,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_throws_exception_if_no_connection_is_available.MyConnection",
        "line": 82,
        "column": 4,
        "endLine": 82,
        "endColumn": 22,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_throws_exception_if_no_connection_is_available.MyConnection.close",
        "line": 87,
        "column": 8,
        "endLine": 87,
        "endColumn": 17,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_throws_exception_if_no_connection_is_available.MyConnection.connect",
        "line": 90,
        "column": 8,
        "endLine": 90,
        "endColumn": 19,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_does_not_throw_exception_connection_is_available",
        "line": 100,
        "column": 0,
        "endLine": 100,
        "endColumn": 87,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_does_not_throw_exception_connection_is_available.MyConnection",
        "line": 101,
        "column": 4,
        "endLine": 101,
        "endColumn": 22,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_does_not_throw_exception_connection_is_available.MyConnection.close",
        "line": 106,
        "column": 8,
        "endLine": 106,
        "endColumn": 17,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_does_not_throw_exception_connection_is_available.MyConnection.connect",
        "line": 109,
        "column": 8,
        "endLine": 109,
        "endColumn": 19,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_does_use_wrap",
        "line": 116,
        "column": 0,
        "endLine": 116,
        "endColumn": 52,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_does_use_wrap.MyConnection",
        "line": 117,
        "column": 4,
        "endLine": 117,
        "endColumn": 22,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-class-docstring",
        "message": "Missing class docstring",
        "message-id": "C0115"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_does_use_wrap.MyConnection.close",
        "line": 119,
        "column": 8,
        "endLine": 119,
        "endColumn": 17,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "refactor",
        "module": "test_dbapi",
        "obj": "test_requires_connection_decorator_does_use_wrap.MyConnection",
        "line": 117,
        "column": 4,
        "endLine": 117,
        "endColumn": 22,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (1/2)",
        "message-id": "R0903"
    },
    {
        "type": "convention",
        "module": "test_dbapi",
        "obj": "test_metadata_from_pyexasol_metadata",
        "line": 146,
        "column": 0,
        "endLine": 146,
        "endColumn": 40,
        "path": "test/unit/exasol/test_dbapi.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "test_deprectation_warnings",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "test/unit/exasol/test_deprectation_warnings.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "test_deprectation_warnings",
        "obj": "test_deprectation_warnings",
        "line": 10,
        "column": 0,
        "endLine": 10,
        "endColumn": 30,
        "path": "test/unit/exasol/test_deprectation_warnings.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "test_deprectation_warnings",
        "obj": "test_deprectation_warnings",
        "line": 10,
        "column": 31,
        "endLine": 10,
        "endColumn": 36,
        "path": "test/unit/exasol/test_deprectation_warnings.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'klass'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "odbc",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "exasol/odbc.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "error",
        "module": "odbc",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": 14,
        "endColumn": 29,
        "path": "exasol/odbc.py",
        "symbol": "no-name-in-module",
        "message": "No name 'Connection' in module 'pyodbc'",
        "message-id": "E0611"
    },
    {
        "type": "convention",
        "module": "odbc",
        "obj": "transaction",
        "line": 34,
        "column": 0,
        "endLine": 34,
        "endColumn": 15,
        "path": "exasol/odbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "odbc",
        "obj": "environment",
        "line": 43,
        "column": 0,
        "endLine": 43,
        "endColumn": 15,
        "path": "exasol/odbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "odbc",
        "obj": "temporary_odbc_config",
        "line": 52,
        "column": 0,
        "endLine": 52,
        "endColumn": 25,
        "path": "exasol/odbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "odbc",
        "obj": "temporary_odbc_config",
        "line": 57,
        "column": 13,
        "endLine": 57,
        "endColumn": 35,
        "path": "exasol/odbc.py",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "message-id": "W1514"
    },
    {
        "type": "warning",
        "module": "odbc",
        "obj": "odbcconfig",
        "line": 66,
        "column": 8,
        "endLine": 67,
        "endColumn": 26,
        "path": "exasol/odbc.py",
        "symbol": "contextmanager-generator-missing-cleanup",
        "message": "The context used in function 'odbcconfig' will not be exited.",
        "message-id": "W0135"
    },
    {
        "type": "convention",
        "module": "odbc",
        "obj": "odbcconfig",
        "line": 63,
        "column": 0,
        "endLine": 63,
        "endColumn": 14,
        "path": "exasol/odbc.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "convention",
        "module": "scripts.git_helpers",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/git_helpers.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "scripts.links",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/links.py",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'not' keyword",
        "message-id": "C0325"
    },
    {
        "type": "convention",
        "module": "scripts.links",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/links.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "scripts.links",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/links.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "warning",
        "module": "scripts.links",
        "obj": "documentation.<lambda>",
        "line": 21,
        "column": 18,
        "endLine": 21,
        "endColumn": 49,
        "path": "scripts/links.py",
        "symbol": "unnecessary-lambda",
        "message": "Lambda may not be necessary",
        "message-id": "W0108"
    },
    {
        "type": "warning",
        "module": "scripts.links",
        "obj": "urls",
        "line": 33,
        "column": 17,
        "endLine": 33,
        "endColumn": 57,
        "path": "scripts/links.py",
        "symbol": "subprocess-run-check",
        "message": "'subprocess.run' used without explicitly defining the value for 'check'.",
        "message-id": "W1510"
    },
    {
        "type": "warning",
        "module": "scripts.links",
        "obj": "urls",
        "line": 37,
        "column": 12,
        "endLine": 37,
        "endColumn": 32,
        "path": "scripts/links.py",
        "symbol": "broad-exception-raised",
        "message": "Raising too general exception: Exception",
        "message-id": "W0719"
    },
    {
        "type": "refactor",
        "module": "scripts.links",
        "obj": "check",
        "line": 49,
        "column": 17,
        "endLine": 49,
        "endColumn": 37,
        "path": "scripts/links.py",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "message-id": "R1732"
    },
    {
        "type": "convention",
        "module": "scripts.version_check",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/version_check.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "scripts.version_check",
        "obj": "",
        "line": 118,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/version_check.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "scripts.version_check",
        "obj": "",
        "line": 122,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/version_check.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "scripts.version_check",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/version_check.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "warning",
        "module": "scripts.version_check",
        "obj": "version_from_python_module",
        "line": 52,
        "column": 9,
        "endLine": 52,
        "endColumn": 19,
        "path": "scripts/version_check.py",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "message-id": "W1514"
    },
    {
        "type": "warning",
        "module": "scripts.version_check",
        "obj": "version_from_python_module",
        "line": 55,
        "column": 8,
        "endLine": 55,
        "endColumn": 44,
        "path": "scripts/version_check.py",
        "symbol": "exec-used",
        "message": "Use of exec",
        "message-id": "W0122"
    },
    {
        "type": "convention",
        "module": "scripts.version_check",
        "obj": "version_from_poetry",
        "line": 65,
        "column": 0,
        "endLine": 65,
        "endColumn": 23,
        "path": "scripts/version_check.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "scripts.version_check",
        "obj": "version_from_poetry",
        "line": 70,
        "column": 13,
        "endLine": 70,
        "endColumn": 69,
        "path": "scripts/version_check.py",
        "symbol": "subprocess-run-check",
        "message": "'subprocess.run' used without explicitly defining the value for 'check'.",
        "message-id": "W1510"
    },
    {
        "type": "convention",
        "module": "scripts.version_check",
        "obj": "write_version_module",
        "line": 75,
        "column": 0,
        "endLine": 75,
        "endColumn": 24,
        "path": "scripts/version_check.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "scripts.version_check",
        "obj": "write_version_module",
        "line": 80,
        "column": 9,
        "endLine": 80,
        "endColumn": 32,
        "path": "scripts/version_check.py",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "message-id": "W1514"
    },
    {
        "type": "convention",
        "module": "scripts.version_check",
        "obj": "_main_debug",
        "line": 116,
        "column": 7,
        "endLine": 116,
        "endColumn": 43,
        "path": "scripts/version_check.py",
        "symbol": "unnecessary-negation",
        "message": "Consider changing \"not module_version == poetry_version\" to \"module_version != poetry_version\"",
        "message-id": "C0117"
    },
    {
        "type": "warning",
        "module": "scripts.version_check",
        "obj": "_main",
        "line": 134,
        "column": 11,
        "endLine": 134,
        "endColumn": 20,
        "path": "scripts/version_check.py",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "message-id": "W0718"
    },
    {
        "type": "convention",
        "module": "scripts.version_check",
        "obj": "main",
        "line": 139,
        "column": 0,
        "endLine": 139,
        "endColumn": 8,
        "path": "scripts/version_check.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "scripts.version_check",
        "obj": "main",
        "line": 139,
        "column": 9,
        "endLine": 139,
        "endColumn": 41,
        "path": "scripts/version_check.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'argv'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "scripts.report",
        "obj": "",
        "line": 69,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/report.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "scripts.report",
        "obj": "",
        "line": 109,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/report.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/88)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "scripts.report",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/report.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "scripts.report",
        "obj": "skipped_test_from",
        "line": 30,
        "column": 0,
        "endLine": 30,
        "endColumn": 21,
        "path": "scripts/report.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "scripts.report",
        "obj": "skipped_test_from",
        "line": 33,
        "column": 35,
        "endLine": 33,
        "endColumn": 63,
        "path": "scripts/report.py",
        "symbol": "eval-used",
        "message": "Use of eval",
        "message-id": "W0123"
    },
    {
        "type": "warning",
        "module": "scripts.report",
        "obj": "skipped_test_from",
        "line": 42,
        "column": 8,
        "endLine": 43,
        "endColumn": 16,
        "path": "scripts/report.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'ex'",
        "message-id": "W0612"
    },
    {
        "type": "convention",
        "module": "scripts.report",
        "obj": "all_skipped_tests",
        "line": 58,
        "column": 0,
        "endLine": 58,
        "endColumn": 21,
        "path": "scripts/report.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "scripts.report",
        "obj": "all_skipped_tests",
        "line": 59,
        "column": 9,
        "endLine": 59,
        "endColumn": 19,
        "path": "scripts/report.py",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "message-id": "W1514"
    },
    {
        "type": "convention",
        "module": "scripts.report",
        "obj": "main",
        "line": 90,
        "column": 0,
        "endLine": 90,
        "endColumn": 8,
        "path": "scripts/report.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "scripts.report",
        "obj": "main",
        "line": 91,
        "column": 39,
        "endLine": 91,
        "endColumn": 50,
        "path": "scripts/report.py",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'format'",
        "message-id": "W0622"
    },
    {
        "type": "warning",
        "module": "scripts.report",
        "obj": "main",
        "line": 91,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/report.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'kwargs'",
        "message-id": "W0613"
    },
    {
        "type": "convention",
        "module": "scripts.report",
        "obj": "cli_main",
        "line": 99,
        "column": 0,
        "endLine": 99,
        "endColumn": 12,
        "path": "scripts/report.py",
        "symbol": "missing-function-docstring",
        "message": "Missing function or method docstring",
        "message-id": "C0116"
    },
    {
        "type": "warning",
        "module": "scripts.report",
        "obj": "cli_main.default",
        "line": 107,
        "column": 15,
        "endLine": 107,
        "endColumn": 24,
        "path": "scripts/report.py",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "message-id": "W0718"
    },
    {
        "type": "refactor",
        "module": "scripts.report",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/report.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==sqlalchemy_exasol.turbodbc:[38:48]\n==sqlalchemy_exasol.websocket:[37:49]\n                if value is None:\n                    return None\n                elif isinstance(value, decimal.Decimal):\n                    return value\n                elif isinstance(value, float):\n                    return decimal.Decimal(fstring % value)\n                else:\n                    return decimal.Decimal(value)\n\n            return to_decimal",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "scripts.report",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/report.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==conftest:[28:39]\n==conftest:[31:42]\n    connection = pyexasol.connect(\n        dsn=dsn,\n        user=user,\n        password=password,\n    )\n    yield connection\n    connection.close()\n\n\ndef pytest_sessionstart(session):\n    with _connection() as con:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "scripts.report",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/report.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==conftest:[6:23]\n==conftest:[6:26]\nregistry.register(\"exa.pyodbc\", \"sqlalchemy_exasol.pyodbc\", \"EXADialect_pyodbc\")\nregistry.register(\"exa.turbodbc\", \"sqlalchemy_exasol.turbodbc\", \"EXADialect_turbodbc\")\nregistry.register(\n    \"exa.websocket\", \"sqlalchemy_exasol.websocket\", \"EXADialect_websocket\"\n)\n\n# Suppress spurious warning from pytest\npytest.register_assert_rewrite(\"sqlalchemy.testing.assertions\")\n\nfrom sqlalchemy.testing.plugin.pytestplugin import *\nfrom sqlalchemy.testing.plugin.pytestplugin import (\n    pytest_sessionfinish as _pytest_sessionfinish,\n)\nfrom sqlalchemy.testing.plugin.pytestplugin import (\n    pytest_sessionstart as _pytest_sessionstart,\n)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "scripts.report",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "scripts/report.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==noxconfig:[25:33]\n==noxfile:[129:136]\n            \"--docker-db-image-version\",\n            db_version,\n            \"--db-mem-size\",\n            \"4GB\",\n            external=True,\n        )\n\n",
        "message-id": "R0801"
    }
]
